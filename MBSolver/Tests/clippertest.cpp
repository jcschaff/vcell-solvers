#include <iostream>
#include <fstream>
#include <cassert>

#include <limits>
#include <vector>
#include <algorithm>
#include <Volume.h>
#include <MovingBoundaryTypes.h>
#include <MBridge/MBPolygon.h>
#include <MBridge/Figure.h>
#include <MBridge/FronTierAdapt.h>
#include "gtest/gtest.h"
#include "clipper.hpp"
#include "Angle.h"
#include "intersection.h"
//these were names used in previous version of clipper
typedef ClipperLib::Path Polygon;
typedef ClipperLib::Paths Polygons;

template <class T>
void populate(matlabBridge::TPolygon<T> & mpoly, const ClipperLib::Path & poly) {
	typedef ClipperLib::Path cprPgon;
	for (cprPgon::const_iterator iter = poly.begin( );iter != poly.end( ); ++iter) {
		//mpoly.add(static_cast<double>(iter->X),static_cast<double>(iter->Y));
		mpoly.add(iter->X,iter->Y);
	}
}

ClipperLib::Path build(int count, long long *x,long long *y) {
	ClipperLib::Path rval;
	for (int i = 0; i < count; i++) {
		rval.push_back(ClipperLib::IntPoint(x[i],y[i]));
	}
	rval.push_back(ClipperLib::IntPoint(x[0],y[0]));
	return rval;
}

TEST(clipper,largenum){
	using namespace ClipperLib;
	cInt hiRange = 0x3FFFFFFFFFFFFFFFLL;
	cInt maxLong  = std::numeric_limits<cInt>::max( );
	std::cout << hiRange << ' ' << maxLong << ' ' << (hiRange == maxLong) << std::endl;
	std::cout << "max value is " << std::numeric_limits<long long>::max( ) << std::endl;
	/*
	Polygon1.x = [4387414506071, 4157630003224, 3891577094948, 3591914093955, 3261635133897, -3870280929772]
	Polygon1.y = [2108535817006, 2483323859773, 2833299351411, 3154965452493, 3445108181668, -440]

	Polygon2.x = [5717460464435, 3518437208883, 3518437208883, 5717460464435]
	Polygon2.y = [4398046511104, 4398046511104, 2199023255552, 2199023255552]
	*/
	cInt x1[] = {4387414506071, 4157630003224, 3891577094948, 3591914093955, 3261635133897, -3870280929772};
	cInt y1[] = {2108535817006, 2483323859773, 2833299351411, 3154965452493, 3445108181668, -440};

	cInt x2[] =  {5717460464435, 3518437208883, 3518437208883, 5717460464435};
	cInt y2[]  = {4398046511104, 4398046511104, 2199023255552, 2199023255552};
	ClipperLib::Path p1 = build(sizeof(x1)/sizeof(x1[0]),x1,y1);
	ClipperLib::Path p2 = build(sizeof(x2)/sizeof(x2[0]),x2,y2);
	std::reverse(p2.begin( ), p2.end( ));

	CleanPolygon(p1,p1);
	CleanPolygon(p2,p2);

	Clipper c;
	bool ap = c.AddPath(p1,ptSubject,true);
	ASSERT_TRUE(ap);
	ap = c.AddPath(p2,ptClip,true);
	ASSERT_TRUE(ap);
	Paths results;
	/*
	PolyFillType types[] = {pftPositive,pftNegative,pftNegative,pftEvenOdd};
	const int ntypes = sizeof(types)/sizeof(types[0]);
	for (int i = 0 ; i <ntypes;i++)  {
	for (int j = 0 ; j <ntypes;j++) {
	const bool r = c.Execute(ctIntersection ,results,types[i],types[j]);
	std::cout << "large " << r << ',' << results.size( ) << " i is " << i << ", j is " << j << std::endl;
	}
	}
	*/
	const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
	std::ofstream script("clipperLarge.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	populate(b1,p1);
	populate(b2,p2);
	script << matlabBridge::FigureName("clipperLarge") << b1 << b2;
	for (Polygons::const_iterator iter = results.begin( ); iter != results.end( );++iter) {
		matlabBridge::TPolygon<long long> a("r+-");
		populate(a,*iter);
		script << a;
	}
	//reply from Clipper developer
	/*
	ClipperLib::Path a;
	a.push_back(IntPoint(3518437208883, 2199023255552));
	a.push_back(IntPoint(3518437208883, 3219513263720));
	a.push_back(IntPoint(3261635133897, 3445108181668));
	a.push_back(IntPoint(682043251292, 2199023255552));
	matlabBridge::TPolygon<long long> b3("r+-");
	populate(b3,a);
	script << b3;
	*/
}

TEST(clipper,small){
	using namespace ClipperLib;
	/*
	Polygon1.x = [4387414506071, 4157630003224, 3891577094948, 3591914093955, 3261635133897, -3870280929772]
	Polygon1.y = [2108535817006, 2483323859773, 2833299351411, 3154965452493, 3445108181668, -440]

	Polygon2.x = [5717460464435, 3518437208883, 3518437208883, 5717460464435]
	Polygon2.y = [4398046511104, 4398046511104, 2199023255552, 2199023255552]
	*/
	cInt x1[] = {0,5,5,0};
	cInt y1[] = {0,0,5,5};

	cInt x2[] =  {-1,6,6,-1};
	cInt y2[]  = {2,2,4,4};
	ClipperLib::Path p1 = build(sizeof(x1)/sizeof(x1[0]),x1,y1);
	ClipperLib::Path p2 = build(sizeof(x2)/sizeof(x2[0]),x2,y2);

	Clipper c;
	c.AddPath(p1,ptSubject,true);
	c.AddPath(p2,ptClip,true);
	Polygons results;
	ClipperLib::Path answer;
	PolyFillType types[] = {pftPositive,pftNegative,pftNegative,pftEvenOdd};
	const int ntypes = sizeof(types)/sizeof(types[0]);
	for (int i = 0 ; i <ntypes;i++)  {
		for (int j = 0 ; j <ntypes;j++) {
			const bool r = c.Execute(ctIntersection ,results,types[i],types[j]);
			if (results.size( ) > 0) {
				std::cout << r << ',' << results.size( ) << "i is " << i << ", j is " << j << std::endl;
				answer = results.front( );
			}
		}
	}
	std::ofstream script("clippersmall.m");
	matlabBridge::TPolygon<long long> b1("g");
	matlabBridge::TPolygon<long long> b2("b");
	matlabBridge::TPolygon<long long> a("r+");
	populate(b1,p1);
	populate(b2,p2);
	populate(a,answer);
	script << matlabBridge::FigureName("clipperFail") << b1 << b2 << a << std::flush;
}
TEST(clipper,request){
	using namespace ClipperLib;
	long long x1[] = {4721014781795280,    4721014781795280,    5438484791397062,    5438484791397062};
	long long y1[] = {1947418597490553,    1879088120385621,    1879088120385621,   1947418597490551};
	long long x2[] = {4814313922692160,     4800114314395577,     4785679378820044,     4771009946699843,     4710004338769085,    -3792559502082542};
	long long y2[] = {1856220285199938,     1887294857627051,     1918260815746161,     1949116377458356,     2071399242770190,              -450359};

	ClipperLib::Path p1 = build(sizeof(x1)/sizeof(x1[0]),x1,y1);
	ClipperLib::Path p2 = build(sizeof(x2)/sizeof(x2[0]),x2,y2);

	Clipper c;
	c.AddPath(p1,ptSubject,true);
	c.AddPath(p2,ptClip,true);
	Polygons results;
	ClipperLib::Path answer;
	PolyFillType types[] = {pftPositive,pftNegative,pftNegative,pftEvenOdd};
	const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
	assert(r);
	typedef ClipperLib::Path::const_iterator PIter;
	if (results.size( ) > 0) {
		answer = results.front( );
		std::ofstream log("results.txt");
		for (PIter iter = answer.begin( ); iter != answer.end( ); ++iter) {
			log << '(' << iter->X << ',' << iter->Y << ") " << std::endl;
		}
	}
	std::ofstream script("clipperReq.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	matlabBridge::TPolygon<long long> a("r");
	populate(b1,p1);
	populate(b2,p2);
	populate(a,answer);
	b1.close( );
	b2.close( );
	a.close( );
	script << matlabBridge::FigureName("clipperReq") << b1 << b2 << a << std::flush;
}

TEST(clipper,miss){
	using namespace ClipperLib;
	cInt x1[] = {0,5,5,0};
	cInt y1[] = {0,0,5,5};

	cInt x2[] =  {14,16,16,14};
	cInt y2[]  = {2,2,4,4};
	ClipperLib::Path p1 = build(sizeof(x1)/sizeof(x1[0]),x1,y1);
	ClipperLib::Path p2 = build(sizeof(x2)/sizeof(x2[0]),x2,y2);
	Clipper c;


	c.AddPath(p1,ptSubject,true);
	c.AddPath(p2,ptClip,true);
	Polygons results;
	ClipperLib::Path answer;
	PolyFillType types[] = {pftPositive,pftNegative,pftNegative,pftEvenOdd};
	const int ntypes = sizeof(types)/sizeof(types[0]);
	for (int i = 0 ; i <ntypes;i++)  {
		for (int j = 0 ; j <ntypes;j++) {
			const bool r = c.Execute(ctIntersection ,results,types[i],types[j]);
			if (results.size( ) > 0) {
				std::cout << r << ',' << results.size( ) << " i is " << i << ", j is " << j << std::endl;
				answer = results.front( );

			}
		}
	}
	std::ofstream script("clippermiss.m");
	matlabBridge::TPolygon<long long> b1("g");
	matlabBridge::TPolygon<long long> b2("b");
	matlabBridge::TPolygon<long long> a("r+");
	populate(b1,p1);
	populate(b2,p2);
	populate(a,answer);
	script << matlabBridge::FigureName("clipperFail") << b1 << b2 << a << std::flush;
}

namespace {
	using spatial::Point2D;
	using spatial::Angle;

	std::vector<Point2D> ellipse(double centerX, double centerY, double a, double b, const spatial::Angle & angleOfMajor, 
		int increment = 10) {
			std::vector<Point2D> rval; 
			const double axisCos = angleOfMajor.cos( );
			const double axisSin = angleOfMajor.sin( );
			for (int d = 0; d < 360; d+=increment) { 
				spatial::DegAngle sweep(d);
				double x = centerX + a * sweep.cos( ) * axisCos - b * sweep.sin( ) * axisSin; 
				double y = centerY + a * sweep.cos( ) * axisSin - b * sweep.sin( ) * axisCos; 
				rval.push_back(Point2D(x,y));
			}
			return rval;
	}
}

#ifdef FIXUP
TEST(clipper,intersection){
#ifdef TIMEIT
	LARGE_INTEGER tps;
	QueryPerformanceFrequency(&tps);
	std::cout << "The system does " << tps.QuadPart << " ticks per second" << std::endl;
#endif
	typedef std::vector<Point2D> OurPolyType;
	OurPolyType a;
	OurPolyType b;
	spatial::Volume<double,double,2>  vol; 
	for (int i = 20; i > 0; --i) {
		a = ellipse(0,0,0.8,0.4,spatial::DegAngle(0),i);
		b = ellipse(0,0,0.8,0.4,spatial::DegAngle(90),i);
		spatial::intersections<double>(vol,a,b);
	}
	matlabBridge::Polygon pA("g+");
	matlabBridge::Polygon pB("b+");
	frontTierAdapt::copyVectorInto(pA,a);
	frontTierAdapt::copyVectorInto(pB,b);
	std::ofstream script("clipperellipse.m");
	script << matlabBridge::writeDateTime << matlabBridge::FigureName("Ellipse intersection") << pA << pB; 
	spatial::Volume<double,double,2>::VectorOfVectors vOfV = vol.points( );
	for (spatial::Volume<double,double,2>::VectorOfVectors::const_iterator vvIter = vOfV.begin( ); vvIter != vOfV.end( );++vvIter) {
		matlabBridge::Polygon pPoly("k",3);
		frontTierAdapt::copyVectorInto(pPoly,*vvIter);
		script << pPoly; 
	}

}
#endif

TEST(clipper,size) {
	std::cout << "Clipper integer values range from " << std::numeric_limits<ClipperLib::cInt>::min( )
		<< " to " << std::numeric_limits<ClipperLib::cInt>::max( ) << std::endl;
}

TEST(clipper,example){
	using namespace ClipperLib;

	ClipperLib::Path a; 
	ClipperLib::Path b;

	a.push_back(IntPoint(9081931755000444,3852088701037340));
	a.push_back(IntPoint(9223372036854776,4261755592555446));
	a.push_back(IntPoint(8899528943709485,4784327748787467));
	a.push_back(IntPoint(5665663308460032,9168595685557330));
	a.push_back(IntPoint(6920856759147015,4512437454088893));
	a.push_back(IntPoint(6128204351779665,2903238065584625));
	a.push_back(IntPoint(4119204340890290,-4142963787133938));
	a.push_back(IntPoint(8746542643914421,3787478073965549));
	a.push_back(IntPoint(9043878658276244,3593034637283243));
	a.push_back(IntPoint(9081931755000444,3852088701037340));
	a.push_back(IntPoint(9081931755000444,3852088701037340));

	b.push_back(IntPoint(6410775356470902,2942958277678163));
	b.push_back(IntPoint(6286170965356830,7405526866037764));
	b.push_back(IntPoint(1298773977681875,9202139602414040));
	b.push_back(IntPoint(-684110545974676,4585850964304698));
	b.push_back(IntPoint(-160563237570624,1552192686524017));
	b.push_back(IntPoint(1159040607476757,-3928434943053781));
	b.push_back(IntPoint(6771193485403109,-2127809313692678));
	b.push_back(IntPoint(6410775356470902,2942958277678163));	
	b.push_back(IntPoint(6410775356470902,2942958277678163));

	Clipper c;
	c.AddPath(a,ptSubject,true);
	c.AddPath(b,ptClip,true);
	Polygons results;
	const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
	assert(r);
	/*
	typedef ClipperLib::Path::const_iterator PIter;
	if (results.size( ) > 0) {
		answer = results.front( );
		std::ofstream log("example.txt");
		for (PIter iter = answer.begin( ); iter != answer.end( ); ++iter) {
			log << '(' << iter->X << ',' << iter->Y << ") " << std::endl;
		}
	}
	*/

	std::ofstream script("clipperExample.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	populate(b1,a);
	populate(b2,b);
	b1.close( );
	b2.close( );
	script << matlabBridge::FigureName("clipperReq") << b1 << b2; 
	for (ClipperLib::Paths::const_iterator pIter = results.begin( ); pIter != results.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans("r");
		ClipperLib::Path answer = *pIter;
		populate(ans,answer);
		ans.close( );
		script << ans;
	}
	script << std::flush;
}
TEST(clipper,m85a){
	using namespace ClipperLib;

	ClipperLib::Path a; 
	ClipperLib::Path b;
	a.push_back(IntPoint(955761822,-241173480));
	a.push_back(IntPoint(866438292,-223308774));
	a.push_back(IntPoint(669926526,-223308774));
	a.push_back(IntPoint(669926526,-241173480));
	a.push_back(IntPoint(955761822,-241173480));
	b.push_back(IntPoint(320030083,292990926));
	b.push_back(IntPoint(317366541,293259361));
	b.push_back(IntPoint(314701536,293512851));
	b.push_back(IntPoint(312034943,293749062));
	b.push_back(IntPoint(309366625,293964906));
	b.push_back(IntPoint(306697136,294165760));
	b.push_back(IntPoint(304026561,294351602));
	b.push_back(IntPoint(301354815,294519785));
	b.push_back(IntPoint(298681882,294667924));
	b.push_back(IntPoint(296008245,294802739));
	b.push_back(IntPoint(293333739,294919060));
	b.push_back(IntPoint(290658579,295019214));
	b.push_back(IntPoint(287982750,295099512));
	b.push_back(IntPoint(285306510,295164735));
	b.push_back(IntPoint(282629946,295214876));
	b.push_back(IntPoint(279953105,295247002));
	b.push_back(IntPoint(277276099,295259382));
	b.push_back(IntPoint(274599066,295256674));
	b.push_back(IntPoint(271922091,295238879));
	b.push_back(IntPoint(269245298,295202976));
	b.push_back(IntPoint(266568840,295147420));
	b.push_back(IntPoint(263892738,295076784));
	b.push_back(IntPoint(261217077,294991074));
	b.push_back(IntPoint(258542061,294887142));
	b.push_back(IntPoint(255867717,294767147));
	b.push_back(IntPoint(253194450,294625187));
	b.push_back(IntPoint(250521823,294471642));
	b.push_back(IntPoint(247850317,294299681));
	b.push_back(IntPoint(245180123,294108435));
	b.push_back(IntPoint(242511046,293902181));
	b.push_back(IntPoint(239843170,293680941));
	b.push_back(IntPoint(237176915,293440951));
	b.push_back(IntPoint(234512428,293182069));
	b.push_back(IntPoint(231849435,292908245));
	b.push_back(IntPoint(229188017,292619508));
	b.push_back(IntPoint(226528763,292311489));
	b.push_back(IntPoint(223871689,291985190));
	b.push_back(IntPoint(221216482,291644036));
	b.push_back(IntPoint(218563094,291289007));
	b.push_back(IntPoint(215912634,290912745));
	b.push_back(IntPoint(213264777,290518584));
	b.push_back(IntPoint(210619044,290110402));
	b.push_back(IntPoint(207975622,289687518));
	b.push_back(IntPoint(205335677,289243442));
	b.push_back(IntPoint(202698500,288783216));
	b.push_back(IntPoint(200063916,288308374));
	b.push_back(IntPoint(197432002,287818945));
	b.push_back(IntPoint(194804173,287308035));
	b.push_back(IntPoint(192179680,286780257));
	b.push_back(IntPoint(189557896,286239186));
	b.push_back(IntPoint(186939547,285681729));
	b.push_back(IntPoint(184325689,285103575));
	b.push_back(IntPoint(181714990,284511323));
	b.push_back(IntPoint(179107693,283904272));
	b.push_back(IntPoint(176504756,283278786));
	b.push_back(IntPoint(173906264,282635087));
	b.push_back(IntPoint(171311320,281977227));
	b.push_back(IntPoint(168719974,281305336));
	b.push_back(IntPoint(166134034,280612931));
	b.push_back(IntPoint(163552816,279903125));
	b.push_back(IntPoint(160975146,279180539));
	b.push_back(IntPoint(158402096,278441671));
	b.push_back(IntPoint(155834949,277682547));
	b.push_back(IntPoint(153270839,276913228));
	b.push_back(IntPoint(150713085,276123036));
	b.push_back(IntPoint(148160551,275316139));
	b.push_back(IntPoint(145613130,274493242));
	b.push_back(IntPoint(143069543,273658572));
	b.push_back(IntPoint(140532179,272805169));
	b.push_back(IntPoint(138001528,271932063));
	b.push_back(IntPoint(135475309,271046211));
	b.push_back(IntPoint(132953595,270147619));
	b.push_back(IntPoint(130439377,269228262));
	b.push_back(IntPoint(127931410,268291985));
	b.push_back(IntPoint(125427802,267344114));
	b.push_back(IntPoint(122930953,266378580));
	b.push_back(IntPoint(120441520,265394083));
	b.push_back(IntPoint(117956408,264398728));
	b.push_back(IntPoint(115477613,263387744));
	b.push_back(IntPoint(113006155,262358955));
	b.push_back(IntPoint(110542336,261312004));
	b.push_back(IntPoint(108082609,260255474));
	b.push_back(IntPoint(105631573,259178935));
	b.push_back(IntPoint(103188288,258084921));
	b.push_back(IntPoint(100749334,256981285));
	b.push_back(IntPoint(98319740,255857191));
	b.push_back(IntPoint(95896931,254718547));
	b.push_back(IntPoint(93479587,253568348));
	b.push_back(IntPoint(91071628,252398629));
	b.push_back(IntPoint(88670674,251214595));
	b.push_back(IntPoint(86276001,250017911));
	b.push_back(IntPoint(83890606,248802839));
	b.push_back(IntPoint(81512769,247573042));
	b.push_back(IntPoint(79141128,246331336));
	b.push_back(IntPoint(76779009,245071611));
	b.push_back(IntPoint(74425618,243795656));
	b.push_back(IntPoint(72077509,242510006));
	b.push_back(IntPoint(69738980,241207013));
	b.push_back(IntPoint(67411428,239884509));
	b.push_back(IntPoint(65087869,238555005));
	b.push_back(IntPoint(62775423,237206262));
	b.push_back(IntPoint(60472874,235840692));
	b.push_back(IntPoint(58175231,234466885));
	b.push_back(IntPoint(55890013,233072507));
	b.push_back(IntPoint(53611788,231666733));
	b.push_back(IntPoint(51341450,230248255));
	b.push_back(IntPoint(49084326,228808845));
	b.push_back(IntPoint(46831099,227363340));
	b.push_back(IntPoint(44590376,225898530));
	b.push_back(IntPoint(42359382,224418943));
	b.push_back(IntPoint(40134688,222929901));
	b.push_back(IntPoint(37924074,221420034));
	b.push_back(IntPoint(35717817,219903807));
	b.push_back(IntPoint(33524582,218368804));
	b.push_back(IntPoint(31341218,216819795));
	b.push_back(IntPoint(29166450,215258738));
	b.push_back(IntPoint(27003870,213680841));
	b.push_back(IntPoint(24848542,212093053));
	b.push_back(IntPoint(22703668,210491170));
	b.push_back(IntPoint(20569046,208875651));
	b.push_back(IntPoint(18445968,207244992));
	b.push_back(IntPoint(16332423,205601995));
	b.push_back(IntPoint(14230886,203943667));
	b.push_back(IntPoint(12134799,202278455));
	b.push_back(IntPoint(10056622,200590944));
	b.push_back(IntPoint(7984621,198895856));
	b.push_back(IntPoint(5927004,197183336));
	b.push_back(IntPoint(3876106,195462776));
	b.push_back(IntPoint(1838687,193726274));
	b.push_back(IntPoint(-188413,191977739));
	b.push_back(IntPoint(-2205137,190217247));
	b.push_back(IntPoint(-4208415,188441468));
	b.push_back(IntPoint(-6203941,186656983));
	b.push_back(IntPoint(-8183369,184854658));
	b.push_back(IntPoint(-10155143,183043963));
	b.push_back(IntPoint(-12112752,181217961));
	b.push_back(IntPoint(-14060322,179381257));
	b.push_back(IntPoint(-15996005,177532029));
	b.push_back(IntPoint(-17919050,175669663));
	b.push_back(IntPoint(-19832557,173797497));
	b.push_back(IntPoint(-21730751,171909808));
	b.push_back(IntPoint(-23621820,170014981));
	b.push_back(IntPoint(-25494831,168102302));
	b.push_back(IntPoint(-27363193,166185082));
	b.push_back(IntPoint(-29210683,164247740));
	b.push_back(IntPoint(-31054458,162306862));
	b.push_back(IntPoint(-32877701,160346684));
	b.push_back(IntPoint(-34695996,158381916));
	b.push_back(IntPoint(-36495249,156399695));
	b.push_back(IntPoint(-38287410,154411060));
	b.push_back(IntPoint(-40062667,152407320));
	b.push_back(IntPoint(-41828015,150394844));
	b.push_back(IntPoint(-43579276,148370098));
	b.push_back(IntPoint(-45317100,146333807));
	b.push_back(IntPoint(-47041624,144286241));
	b.push_back(IntPoint(-48753942,142228456));
	b.push_back(IntPoint(-50450939,140158018));
	b.push_back(IntPoint(-52138441,138079834));
	b.push_back(IntPoint(-53809409,135988333));
	b.push_back(IntPoint(-55473139,133891069));
	b.push_back(IntPoint(-57117164,131778324));
	b.push_back(IntPoint(-58750631,129657405));
	b.push_back(IntPoint(-60370721,127526251));
	b.push_back(IntPoint(-61973039,125381702));
	b.push_back(IntPoint(-63569044,123232450));
	b.push_back(IntPoint(-65143162,121067118));
	b.push_back(IntPoint(-66711797,118897810));
	b.push_back(IntPoint(-68261432,116714890));
	b.push_back(IntPoint(-69797468,114522379));
	b.push_back(IntPoint(-71321829,112321734));
	b.push_back(IntPoint(-72827917,110108544));
	b.push_back(IntPoint(-74325674,107889708));
	b.push_back(IntPoint(-75806646,105659633));
	b.push_back(IntPoint(-77272400,103419527));
	b.push_back(IntPoint(-78723852,101170127));
	b.push_back(IntPoint(-80161911,98912141));
	b.push_back(IntPoint(-81586864,96645863));
	b.push_back(IntPoint(-82996277,94369887));
	b.push_back(IntPoint(-84389764,92084125));
	b.push_back(IntPoint(-85768573,89789480));
	b.push_back(IntPoint(-87138223,87489356));
	b.push_back(IntPoint(-88489170,85178197));
	b.push_back(IntPoint(-89822044,82856569));
	b.push_back(IntPoint(-91146720,80530253));
	b.push_back(IntPoint(-92452583,78193325));
	b.push_back(IntPoint(-93742723,75847680));
	b.push_back(IntPoint(-95022046,73496118));
	b.push_back(IntPoint(-96282556,71134418));
	b.push_back(IntPoint(-97529113,68765324));
	b.push_back(IntPoint(-98763083,66389649));
	b.push_back(IntPoint(-99977961,64004155));
	b.push_back(IntPoint(-101179811,61612070));
	b.push_back(IntPoint(-102368428,59213383));
	b.push_back(IntPoint(-103537599,56805157));
	b.push_back(IntPoint(-104693505,54390536));
	b.push_back(IntPoint(-105836769,51969905));
	b.push_back(IntPoint(-106960187,49539999));
	b.push_back(IntPoint(-108068967,47103378));
	b.push_back(IntPoint(-109166878,44661841));
	b.push_back(IntPoint(-110244338,42211211));
	b.push_back(IntPoint(-111305049,39753284));
	b.push_back(IntPoint(-112355780,37291074));
	b.push_back(IntPoint(-113388230,34821143));
	b.push_back(IntPoint(-114400683,32342948));
	b.push_back(IntPoint(-115403256,29860740));
	b.push_back(IntPoint(-116387785,27371319));
	b.push_back(IntPoint(-117356896,24875856));
	b.push_back(IntPoint(-118309041,22373871));
	b.push_back(IntPoint(-119248218,19866989));
	b.push_back(IntPoint(-120167225,17352642));
	b.push_back(IntPoint(-121071992,14833136));
	b.push_back(IntPoint(-121964060,12309107));
	b.push_back(IntPoint(-122835208,9777780));
	b.push_back(IntPoint(-123692440,7241708));
	b.push_back(IntPoint(-124533865,4700347));
	b.push_back(IntPoint(-125359660,2153864));
	b.push_back(IntPoint(-126166054,-398828));
	b.push_back(IntPoint(-126958825,-2955784));
	b.push_back(IntPoint(-127738113,-5516882));
	b.push_back(IntPoint(-128495701,-8084482));
	b.push_back(IntPoint(-129238225,-10656479));
	b.push_back(IntPoint(-129966931,-13232426));
	b.push_back(IntPoint(-130679344,-15812926));
	b.push_back(IntPoint(-131374436,-18398145));
	b.push_back(IntPoint(-132049453,-20988678));
	b.push_back(IntPoint(-132713392,-23582073));
	b.push_back(IntPoint(-133357777,-26180396));
	b.push_back(IntPoint(-133984870,-28782945));
	b.push_back(IntPoint(-134599528,-31388460));
	b.push_back(IntPoint(-135196279,-33998135));
	b.push_back(IntPoint(-135772634,-36612389));
	b.push_back(IntPoint(-136334155,-39229870));
	b.push_back(IntPoint(-136881256,-41850403));
	b.push_back(IntPoint(-137412259,-44474245));
	b.push_back(IntPoint(-137922207,-47102260));
	b.push_back(IntPoint(-138421320,-49732355));
	b.push_back(IntPoint(-138898473,-52366522));
	b.push_back(IntPoint(-139361447,-55003218));
	b.push_back(IntPoint(-139804992,-57643252));
	b.push_back(IntPoint(-140233869,-60285709));
	b.push_back(IntPoint(-140648031,-62930511));
	b.push_back(IntPoint(-141042977,-65578252));
	b.push_back(IntPoint(-141419711,-68228645));
	b.push_back(IntPoint(-141782703,-70880955));
	b.push_back(IntPoint(-142128771,-73535526));
	b.push_back(IntPoint(-142455687,-76192524));
	b.push_back(IntPoint(-142765269,-78851597));
	b.push_back(IntPoint(-143059961,-81512362));
	b.push_back(IntPoint(-143339733,-84174737));
	b.push_back(IntPoint(-143598620,-86839223));
	b.push_back(IntPoint(-143840772,-89505283));
	b.push_back(IntPoint(-144067955,-92172660));
	b.push_back(IntPoint(-144280145,-94841271));
	b.push_back(IntPoint(-144471004,-97511493));
	b.push_back(IntPoint(-144645509,-100182833));
	b.push_back(IntPoint(-144804986,-102855113));
	b.push_back(IntPoint(-144949419,-105528248));
	b.push_back(IntPoint(-145072250,-108202463));
	b.push_back(IntPoint(-145178952,-110877370));
	b.push_back(IntPoint(-145270588,-113552835));
	b.push_back(IntPoint(-145347148,-116228774));
	b.push_back(IntPoint(-145401950,-118905247));
	b.push_back(IntPoint(-145440753,-121582000));
	b.push_back(IntPoint(-145464471,-124258929));
	b.push_back(IntPoint(-145473102,-126935949));
	b.push_back(IntPoint(-145459874,-129612951));
	b.push_back(IntPoint(-145430741,-132289826));
	b.push_back(IntPoint(-145386523,-134966495));
	b.push_back(IntPoint(-145327225,-137642872));
	b.push_back(IntPoint(-145245969,-140318673));
	b.push_back(IntPoint(-145148921,-142993947));
	b.push_back(IntPoint(-145036808,-145668633));
	b.push_back(IntPoint(-144909642,-148342645));
	b.push_back(IntPoint(-144760357,-151015513));
	b.push_back(IntPoint(-144595473,-153687465));
	b.push_back(IntPoint(-144415565,-156358447));
	b.push_back(IntPoint(-144220650,-159028376));
	b.push_back(IntPoint(-144003337,-161696575));
	b.push_back(IntPoint(-143770757,-164363487));
	b.push_back(IntPoint(-143523212,-167029051));
	b.push_back(IntPoint(-143260546,-169693168));
	b.push_back(IntPoint(-142975386,-172354971));
	b.push_back(IntPoint(-142675310,-175015133));
	b.push_back(IntPoint(-142360348,-177673575));
	b.push_back(IntPoint(-142029653,-180330105));
	b.push_back(IntPoint(-141677323,-182983852));
	b.push_back(IntPoint(-141309851,-185635545));
	b.push_back(IntPoint(-140927755,-188285171));
	b.push_back(IntPoint(-140529031,-190932345));
	b.push_back(IntPoint(-140109513,-193576303));
	b.push_back(IntPoint(-139675288,-196217886));
	b.push_back(IntPoint(-139226401,-198857017));
	b.push_back(IntPoint(-138759648,-201493047));
	b.push_back(IntPoint(-138275773,-204125988));
	b.push_back(IntPoint(-137772722,-206755332));
	b.push_back(IntPoint(-137257456,-209382310));
	b.push_back(IntPoint(-136722675,-212005384));
	b.push_back(IntPoint(-136170267,-214624804));
	b.push_back(IntPoint(-135603448,-217241142));
	b.push_back(IntPoint(-135022674,-219854419));
	b.push_back(IntPoint(-134420356,-222462814));
	b.push_back(IntPoint(-133801338,-225067296));
	b.push_back(IntPoint(-133168977,-227668571));
	b.push_back(IntPoint(-132520814,-230265954));
	b.push_back(IntPoint(-131851620,-232857997));
	b.push_back(IntPoint(-131171005,-235447066));
	b.push_back(IntPoint(-130471033,-238030968));
	b.push_back(IntPoint(-129754841,-240610421));
	b.push_back(IntPoint(-129020917,-243184886));
	b.push_back(IntPoint(-128273942,-245755594));
	b.push_back(IntPoint(-127511562,-248321776));
	b.push_back(IntPoint(-126727342,-250881368));
	b.push_back(IntPoint(-125929393,-253436713));
	b.push_back(IntPoint(-125117858,-255987776));
	b.push_back(IntPoint(-124288397,-258533067));
	b.push_back(IntPoint(-123439487,-261071937));
	b.push_back(IntPoint(-122579321,-263607017));
	b.push_back(IntPoint(-121704395,-266137039));
	b.push_back(IntPoint(-120808475,-268659704));
	b.push_back(IntPoint(-119896798,-271176718));
	b.push_back(IntPoint(-118973261,-273689404));
	b.push_back(IntPoint(-118030305,-276194867));
	b.push_back(IntPoint(-117074630,-278695506));
	b.push_back(IntPoint(-116098948,-281188408));
	b.push_back(IntPoint(-115110640,-283676330));
	b.push_back(IntPoint(-114103045,-286156504));
	b.push_back(IntPoint(-113083487,-288631785));
	b.push_back(IntPoint(-112049144,-291100924));
	b.push_back(IntPoint(-110993641,-293561091));
	b.push_back(IntPoint(-109929188,-296017400));
	b.push_back(IntPoint(-108845572,-298465315));
	b.push_back(IntPoint(-107743882,-300905149));
	b.push_back(IntPoint(-106631422,-303340091));
	b.push_back(IntPoint(-105501880,-305767156));
	b.push_back(IntPoint(-104354837,-308186000));
	b.push_back(IntPoint(-103195339,-310598898));
	b.push_back(IntPoint(-102020055,-313004146));
	b.push_back(IntPoint(-100827659,-315400957));
	b.push_back(IntPoint(-99622315,-317791283));
	b.push_back(IntPoint(-98401333,-320173659));
	b.push_back(IntPoint(-97163584,-322547367));
	b.push_back(IntPoint(-95913623,-324914667));
	b.push_back(IntPoint(-94647032,-327273111));
	b.push_back(IntPoint(-93363931,-329622614));
	b.push_back(IntPoint(-92070454,-331966420));
	b.push_back(IntPoint(-90758564,-334299970));
	b.push_back(IntPoint(-89430109,-336624130));
	b.push_back(IntPoint(-88091286,-338942333));
	b.push_back(IntPoint(-86737441,-341251795));
	b.push_back(IntPoint(-85364741,-343550101));
	b.push_back(IntPoint(-83979350,-345840778));
	b.push_back(IntPoint(-82582866,-348124709));
	b.push_back(IntPoint(-81170125,-350398621));
	b.push_back(IntPoint(-79739585,-352661378));
	b.push_back(IntPoint(-78297748,-354916953));
	b.push_back(IntPoint(-76840136,-357162365));
	b.push_back(IntPoint(-75372004,-359400914));
	b.push_back(IntPoint(-73887426,-361628590));
	b.push_back(IntPoint(-72384783,-363844120));
	b.push_back(IntPoint(-70874916,-366054734));
	b.push_back(IntPoint(-69344827,-368251400));
	b.push_back(IntPoint(-67806536,-370442329));
	b.push_back(IntPoint(-66251672,-372621529));
	b.push_back(IntPoint(-64680421,-374788942));
	b.push_back(IntPoint(-63101645,-376950881));
	b.push_back(IntPoint(-61501072,-379096732));
	b.push_back(IntPoint(-59895794,-381239066));
	b.push_back(IntPoint(-58270472,-383366233));
	b.push_back(IntPoint(-56634912,-385485539));
	b.push_back(IntPoint(-54985661,-387594207));
	b.push_back(IntPoint(-53319883,-389689844));
	b.push_back(IntPoint(-51643096,-391776683));
	b.push_back(IntPoint(-49951815,-393851793));
	b.push_back(IntPoint(-48248614,-395917130));
	b.push_back(IntPoint(-46534398,-397973334));
	b.push_back(IntPoint(-44804580,-400016430));
	b.push_back(IntPoint(-43064845,-402051088));
	b.push_back(IntPoint(-41308352,-404071297));
	b.push_back(IntPoint(-39541135,-406082132));
	b.push_back(IntPoint(-37760649,-408081227));
	b.push_back(IntPoint(-35966659,-410068212));
	b.push_back(IntPoint(-34162180,-412045677));
	b.push_back(IntPoint(-32342096,-414008789));
	b.push_back(IntPoint(-30513630,-415964095));
	b.push_back(IntPoint(-28668106,-417903310));
	b.push_back(IntPoint(-26815568,-419835824));
	b.push_back(IntPoint(-24945325,-421751210));
	b.push_back(IntPoint(-23067308,-423658974));
	b.push_back(IntPoint(-21174359,-425551923));
	b.push_back(IntPoint(-19271201,-427434608));
	b.push_back(IntPoint(-17355815,-429304851));
	b.push_back(IntPoint(-15427847,-431162121));
	b.push_back(IntPoint(-13490284,-433009379));
	b.push_back(IntPoint(-11537831,-434840891));
	b.push_back(IntPoint(-9577051,-436663486));
	b.push_back(IntPoint(-7601713,-438470293));
	b.push_back(IntPoint(-5617057,-440266860));
	b.push_back(IntPoint(-3620039,-442049676));
	b.push_back(IntPoint(-1611533,-443819538));
	b.push_back(IntPoint(406646,-445578362));
	b.push_back(IntPoint(2438979,-447320813));
	b.push_back(IntPoint(4477815,-449055650));
	b.push_back(IntPoint(6533948,-450769951));
	b.push_back(IntPoint(8595395,-452477859));
	b.push_back(IntPoint(10670505,-454169140));
	b.push_back(IntPoint(12753203,-455851067));
	b.push_back(IntPoint(14848463,-457517320));
	b.push_back(IntPoint(16953366,-459171373));
	b.push_back(IntPoint(19070335,-460809957));
	b.push_back(IntPoint(21197108,-462435794));
	b.push_back(IntPoint(23335926,-464045753));
	b.push_back(IntPoint(25481777,-465646327));
	b.push_back(IntPoint(27640108,-467230030));
	b.push_back(IntPoint(29805190,-468804493));
	b.push_back(IntPoint(31982726,-470361686));
	b.push_back(IntPoint(34171326,-471903290));
	b.push_back(IntPoint(36365702,-473436660));
	b.push_back(IntPoint(38575239,-474948103));
	b.push_back(IntPoint(40788583,-476453964));
	b.push_back(IntPoint(43014704,-477940873));
	b.push_back(IntPoint(45250928,-479412544));
	b.push_back(IntPoint(47493163,-480875040));
	b.push_back(IntPoint(49748737,-482316877));
	b.push_back(IntPoint(52009323,-483750844));
	b.push_back(IntPoint(54280666,-485167712));
	b.push_back(IntPoint(56563517,-486565962));
	b.push_back(IntPoint(58851234,-487956236));
	b.push_back(IntPoint(61149540,-489328935));
	b.push_back(IntPoint(63456686,-490686723));
	b.push_back(IntPoint(65771905,-492030700));
	b.push_back(IntPoint(68096065,-493359155));
	b.push_back(IntPoint(70427136,-494675443));
	b.push_back(IntPoint(72768220,-495973842));
	b.push_back(IntPoint(75117723,-497256943));
	b.push_back(IntPoint(77473191,-498529061));
	b.push_back(IntPoint(79838487,-499782808));
	b.push_back(IntPoint(82212195,-501020557));
	b.push_back(IntPoint(84591838,-502246856));
	b.push_back(IntPoint(86980144,-503456198));
	b.push_back(IntPoint(89376956,-504648593));
	b.push_back(IntPoint(91779599,-505829194));
	b.push_back(IntPoint(94190571,-506992690));
	b.push_back(IntPoint(96609415,-508139733));
	b.push_back(IntPoint(99033889,-509274826));
	b.push_back(IntPoint(101467107,-510391052));
	b.push_back(IntPoint(103906941,-511492742));
	b.push_back(IntPoint(106352803,-512580985));
	b.push_back(IntPoint(108807072,-513650132));
	b.push_back(IntPoint(111266882,-514706470));
	b.push_back(IntPoint(113734472,-515744502));
	b.push_back(IntPoint(116207770,-516768859));
	b.push_back(IntPoint(118686564,-517779843));
	b.push_back(IntPoint(121173984,-518769417));
	b.push_back(IntPoint(123665177,-519749452));
	b.push_back(IntPoint(126163914,-520710089));
	b.push_back(IntPoint(128669378,-521653045));
	b.push_back(IntPoint(131180345,-522581244));
	b.push_back(IntPoint(133695571,-523497840));
	b.push_back(IntPoint(136218095,-524394157));
	b.push_back(IntPoint(138746731,-525273085));
	b.push_back(IntPoint(141280107,-526138254));
	b.push_back(IntPoint(143818422,-526988822));
	b.push_back(IntPoint(146362838,-527820963));
	b.push_back(IntPoint(148912421,-528637136));
	b.push_back(IntPoint(151466308,-529439740));
	b.push_back(IntPoint(154025900,-530223961));
	b.push_back(IntPoint(156590565,-530991429));
	b.push_back(IntPoint(159160039,-531742637));
	b.push_back(IntPoint(161733172,-532481214));
	b.push_back(IntPoint(164312626,-533197406));
	b.push_back(IntPoint(166895440,-533901380));
	b.push_back(IntPoint(169483105,-534587313));
	b.push_back(IntPoint(172074724,-535258152));
	b.push_back(IntPoint(174671352,-535909329));
	b.push_back(IntPoint(177271490,-536546350));
	b.push_back(IntPoint(179874995,-537169465));
	b.push_back(IntPoint(182482851,-537774112));
	b.push_back(IntPoint(185095484,-538357775));
	b.push_back(IntPoint(187710809,-538929252));
	b.push_back(IntPoint(190329242,-539486315));
	b.push_back(IntPoint(192952317,-540021097));
	b.push_back(IntPoint(195578376,-540541023));
	b.push_back(IntPoint(198207007,-541047788));
	b.push_back(IntPoint(200839096,-541536276));
	b.push_back(IntPoint(203474950,-542004018));
	b.push_back(IntPoint(206113285,-542457564));
	b.push_back(IntPoint(208754098,-542896447));
	b.push_back(IntPoint(211397757,-543317847));
	b.push_back(IntPoint(214044511,-543719347));
	b.push_back(IntPoint(216693460,-544106103));
	b.push_back(IntPoint(219344516,-544478147));
	b.push_back(IntPoint(221998070,-544831932));
	b.push_back(IntPoint(224654188,-545165917));
	b.push_back(IntPoint(227312074,-545485537));
	b.push_back(IntPoint(229971707,-545790271));
	b.push_back(IntPoint(232633490,-546075613));
	b.push_back(IntPoint(235297162,-546342757));
	b.push_back(IntPoint(237962289,-546594961));
	b.push_back(IntPoint(240628791,-546832198));
	b.push_back(IntPoint(243296990,-547049511));
	b.push_back(IntPoint(245966575,-547249085));
	b.push_back(IntPoint(248637239,-547433652));
	b.push_back(IntPoint(251308899,-547603194));
	b.push_back(IntPoint(253981767,-547752478));
	b.push_back(IntPoint(256655554,-547884303));
	b.push_back(IntPoint(259330040,-548001075));
	b.push_back(IntPoint(262005141,-548102781));
	b.push_back(IntPoint(264680942,-548184037));
	b.push_back(IntPoint(267357212,-548247994));
	b.push_back(IntPoint(270033800,-548296870));
	b.push_back(IntPoint(272710620,-548330661));
	b.push_back(IntPoint(275387622,-548343888));
	b.push_back(IntPoint(278064653,-548339916));
	b.push_back(IntPoint(280741619,-548320857));
	b.push_back(IntPoint(283418436,-548286712));
	b.push_back(IntPoint(286094909,-548231910));
	b.push_back(IntPoint(288770977,-548160008));
	b.push_back(IntPoint(291446598,-548073030));
	b.push_back(IntPoint(294121686,-547970987));
	b.push_back(IntPoint(296795901,-547848156));
	b.push_back(IntPoint(299469284,-547708380));
	b.push_back(IntPoint(302141837,-547553561));
	b.push_back(IntPoint(304813478,-547383716));
	b.push_back(IntPoint(307483700,-547192856));
	b.push_back(IntPoint(310152677,-546985323));
	b.push_back(IntPoint(312820447,-546762799));
	b.push_back(IntPoint(315486926,-546525307));
	b.push_back(IntPoint(318151412,-546266419));
	b.push_back(IntPoint(320814272,-545991305));
	b.push_back(IntPoint(323475549,-545701271));
	b.push_back(IntPoint(326135161,-545396349));
	b.push_back(IntPoint(328792158,-545069432));
	b.push_back(IntPoint(331447393,-544728495));
	b.push_back(IntPoint(334100273,-544369688));
	b.push_back(IntPoint(336751297,-543997419));
	b.push_back(IntPoint(339399066,-543602669));
	b.push_back(IntPoint(342044594,-543193163));
	b.push_back(IntPoint(344687802,-542768946));
	b.push_back(IntPoint(347328380,-542328647));
	b.push_back(IntPoint(349965324,-541867086));
	b.push_back(IntPoint(352600175,-541393725));
	b.push_back(IntPoint(355231312,-540900135));
	b.push_back(IntPoint(357859641,-540391808));
	b.push_back(IntPoint(360484096,-539863842));
	b.push_back(IntPoint(363105597,-539321398));
	b.push_back(IntPoint(365724073,-538764538));
	b.push_back(IntPoint(368338327,-538188183));
	b.push_back(IntPoint(370949277,-537597035));
	b.push_back(IntPoint(373555664,-536986089));
	b.push_back(IntPoint(376159333,-536363657));
	b.push_back(IntPoint(378757656,-535719273));
	b.push_back(IntPoint(381352238,-535059990));
	b.push_back(IntPoint(383943648,-534388348));
	b.push_back(IntPoint(386529977,-533697393));
	b.push_back(IntPoint(389110974,-532986784));
	b.push_back(IntPoint(391688233,-532262736));
	b.push_back(IntPoint(394261561,-531524836));
	b.push_back(IntPoint(396829161,-530767248));
	b.push_back(IntPoint(399391682,-529992650));
	b.push_back(IntPoint(401950078,-529204538));
	b.push_back(IntPoint(404503803,-528401419));
	b.push_back(IntPoint(407050735,-527577010));
	b.push_back(IntPoint(409593753,-526740608));
	b.push_back(IntPoint(412131274,-525887672));
	b.push_back(IntPoint(414662600,-525016524));
	b.push_back(IntPoint(417188270,-524129110));
	b.push_back(IntPoint(419709489,-523229128));
	b.push_back(IntPoint(422224529,-522312023));
	b.push_back(IntPoint(424732396,-521375477));
	b.push_back(IntPoint(427235911,-520427361));
	b.push_back(IntPoint(429733422,-519463542));
	b.push_back(IntPoint(432222843,-518479012));
	b.push_back(IntPoint(434706926,-517481094));
	b.push_back(IntPoint(437186413,-516471809));
	b.push_back(IntPoint(439657187,-515441377));
	b.push_back(IntPoint(442121153,-514394773));
	b.push_back(IntPoint(444580656,-513337723));
	b.push_back(IntPoint(447032310,-512262591));
	b.push_back(IntPoint(449475339,-511168005));
	b.push_back(IntPoint(451913848,-510063384));
	b.push_back(IntPoint(454345256,-508943220));
	b.push_back(IntPoint(456766787,-507801862));
	b.push_back(IntPoint(459183505,-506650347));
	b.push_back(IntPoint(461593524,-505484878));
	b.push_back(IntPoint(463992820,-504297489));
	b.push_back(IntPoint(466387104,-503100028));
	b.push_back(IntPoint(468774570,-501889030));
	b.push_back(IntPoint(471150792,-500656113));
	b.push_back(IntPoint(473522080,-499413735));
	b.push_back(IntPoint(475885800,-498157016));
	b.push_back(IntPoint(478238096,-496879043));
	b.push_back(IntPoint(480585816,-495592684));
	b.push_back(IntPoint(482924565,-494290084));
	b.push_back(IntPoint(485252173,-492967680));
	b.push_back(IntPoint(487575643,-491638019));
	b.push_back(IntPoint(489888160,-490289399));
	b.push_back(IntPoint(492190524,-488923518));
	b.push_back(IntPoint(494488062,-487549535));
	b.push_back(IntPoint(496773824,-486156047));
	b.push_back(IntPoint(499052139,-484750419));
	b.push_back(IntPoint(501321786,-483330837));
	b.push_back(IntPoint(503579772,-481892778));
	b.push_back(IntPoint(505832571,-480446609));
	b.push_back(IntPoint(508073982,-478982850));
	b.push_back(IntPoint(510305080,-477503420));
	b.push_back(IntPoint(512527389,-476010820));
	b.push_back(IntPoint(514740579,-474504732));
	b.push_back(IntPoint(516944846,-472985615));
	b.push_back(IntPoint(519139679,-471452899));
	b.push_back(IntPoint(521323923,-469905129));
	b.push_back(IntPoint(523495792,-468340042));
	b.push_back(IntPoint(525661124,-466765924));
	b.push_back(IntPoint(527813915,-465174697));
	b.push_back(IntPoint(529960791,-463575499));
	b.push_back(IntPoint(532093715,-461957738));
	b.push_back(IntPoint(534216963,-460327300));
	b.push_back(IntPoint(536331518,-458685603));
	b.push_back(IntPoint(538431112,-457024816));
	b.push_back(IntPoint(540526412,-455358613));
	b.push_back(IntPoint(542604596,-453671111));
	b.push_back(IntPoint(544679199,-451979209));
	b.push_back(IntPoint(546736996,-450266905));
	b.push_back(IntPoint(548788076,-448546561));
	b.push_back(IntPoint(550825682,-446810280));
	b.push_back(IntPoint(552852966,-445061957));
	b.push_back(IntPoint(554869067,-443300751));
	b.push_back(IntPoint(556873354,-441526112));
	b.push_back(IntPoint(558865843,-439738236));
	b.push_back(IntPoint(560848723,-437939709));
	b.push_back(IntPoint(562817287,-436125524));
	b.push_back(IntPoint(564778525,-434303422));
	b.push_back(IntPoint(566722847,-432463279));
	b.push_back(IntPoint(568662201,-430617902));
	b.push_back(IntPoint(570581958,-428752146));
	b.push_back(IntPoint(572498689,-426883282));
	b.push_back(IntPoint(574394049,-424992747));
	b.push_back(IntPoint(576286378,-423099178));
	b.push_back(IntPoint(578158544,-421185672));
	b.push_back(IntPoint(580025613,-419267192));
	b.push_back(IntPoint(581874841,-417331509));
	b.push_back(IntPoint(583716313,-415388447));
	b.push_back(IntPoint(585542315,-413430839));
	b.push_back(IntPoint(587357846,-411463516));
	b.push_back(IntPoint(589160323,-409484226));
	b.push_back(IntPoint(590949560,-407492960));
	b.push_back(IntPoint(592727968,-405492016));
	b.push_back(IntPoint(594490788,-403477325));
	b.push_back(IntPoint(596242022,-401452556));
	b.push_back(IntPoint(597980852,-399417125));
	b.push_back(IntPoint(599704186,-397368556));
	b.push_back(IntPoint(601419036,-395312881));
	b.push_back(IntPoint(603116959,-393243202));
	b.push_back(IntPoint(604811564,-391170807));
	b.push_back(IntPoint(606475719,-389073880));
	b.push_back(IntPoint(608136656,-386974404));
	b.push_back(IntPoint(609780895,-384861825));
	b.push_back(IntPoint(611414574,-382741070));
	b.push_back(IntPoint(613034871,-380610072));
	b.push_back(IntPoint(614637406,-378465686));
	b.push_back(IntPoint(616230122,-376313996));
	b.push_back(IntPoint(617808019,-374151416));
	b.push_back(IntPoint(619374338,-371980436));
	b.push_back(IntPoint(620926638,-369799409));
	b.push_back(IntPoint(622462888,-367607048));
	b.push_back(IntPoint(623983290,-365403667));
	b.push_back(IntPoint(625493157,-363193053));
	b.push_back(IntPoint(626987180,-360971700));
	b.push_back(IntPoint(628470280,-358743040));
	b.push_back(IntPoint(629937419,-356503841));
	b.push_back(IntPoint(631386085,-354252646));
	b.push_back(IntPoint(632827922,-351997071));
	b.push_back(IntPoint(634249109,-349728429));
	b.push_back(IntPoint(635658652,-347452533));
	b.push_back(IntPoint(637055884,-345169059));
	b.push_back(IntPoint(638431910,-342872743));
	b.push_back(IntPoint(639800977,-340572272));
	b.push_back(IntPoint(641152049,-338261187));
	b.push_back(IntPoint(642485049,-335939631));
	b.push_back(IntPoint(643810744,-333613896));
	b.push_back(IntPoint(645115777,-331276504));
	b.push_back(IntPoint(646405520,-328930640));
	b.push_back(IntPoint(647686270,-326579856));
	b.push_back(IntPoint(648945996,-324217737));
	b.push_back(IntPoint(650192123,-321848417));
	b.push_back(IntPoint(651426672,-319473043));
	b.push_back(IntPoint(652641745,-317087648));
	b.push_back(IntPoint(653842958,-314695243));
	b.push_back(IntPoint(655031781,-312296658));
	b.push_back(IntPoint(656201501,-309888699));
	b.push_back(IntPoint(657356365,-307473580));
	b.push_back(IntPoint(658499719,-305052991));
	b.push_back(IntPoint(659623813,-302623397));
	b.push_back(IntPoint(660732059,-300186534));
	b.push_back(IntPoint(661830388,-297745185));
	b.push_back(IntPoint(662907776,-295294523));
	b.push_back(IntPoint(663968462,-292836585));
	b.push_back(IntPoint(665019000,-290374293));
	b.push_back(IntPoint(666051625,-287904435));
	b.push_back(IntPoint(667064505,-285426415));
	b.push_back(IntPoint(668064807,-282943290));
	b.push_back(IntPoint(669052984,-280455316));
	b.push_back(IntPoint(670019226,-277958740));
	b.push_back(IntPoint(670971739,-275456895));
	b.push_back(IntPoint(671911866,-272950369));
	b.push_back(IntPoint(672833553,-270437003));
	b.push_back(IntPoint(673735283,-267916409));
	b.push_back(IntPoint(674625793,-265391829));
	b.push_back(IntPoint(675500719,-262861807));
	b.push_back(IntPoint(676358150,-260325801));
	b.push_back(IntPoint(677196291,-257783355));
	b.push_back(IntPoint(678023844,-255237443));
	b.push_back(IntPoint(678830741,-252684910));
	b.push_back(IntPoint(679624886,-250128380));
	b.push_back(IntPoint(680399574,-247565887));
	b.push_back(IntPoint(681161119,-244999457));
	b.push_back(IntPoint(681902226,-242427051));
	b.push_back(IntPoint(682629472,-239850692));
	b.push_back(IntPoint(683344075,-237270798));
	b.push_back(IntPoint(684036568,-234684881));
	b.push_back(IntPoint(684712893,-232094689));
	b.push_back(IntPoint(685375412,-229500931));
	b.push_back(IntPoint(686023575,-226903549));
	b.push_back(IntPoint(686649253,-224300658));
	b.push_back(IntPoint(687261062,-221694473));
	b.push_back(IntPoint(687857875,-219084813));
	b.push_back(IntPoint(688438010,-216471394));
	b.push_back(IntPoint(688998147,-213853617));
	b.push_back(IntPoint(689543877,-211232799));
	b.push_back(IntPoint(690075645,-208609111));
	b.push_back(IntPoint(690588899,-205981740));
	b.push_back(IntPoint(691081312,-203350382));
	b.push_back(IntPoint(691560815,-200716642));
	b.push_back(IntPoint(692025697,-198080282));
	b.push_back(IntPoint(692469774,-195440337));
	b.push_back(IntPoint(692897320,-192797665));
	b.push_back(IntPoint(693310160,-190152655));
	b.push_back(IntPoint(693708339,-187505399));
	b.push_back(IntPoint(694086930,-184855271));
	b.push_back(IntPoint(694444930,-182202283));
	b.push_back(IntPoint(694790744,-179547678));
	b.push_back(IntPoint(695121439,-176891148));
	b.push_back(IntPoint(695429719,-174231923));
	b.push_back(IntPoint(695723117,-171571016));
	b.push_back(IntPoint(696001600,-168908506));
	b.push_back(IntPoint(696264266,-166244389));
	b.push_back(IntPoint(696505131,-163578213));
	b.push_back(IntPoint(696731032,-160910727));
	b.push_back(IntPoint(696941945,-158242014));
	b.push_back(IntPoint(697136582,-155572065));
	b.push_back(IntPoint(697309811,-152900642));
	b.push_back(IntPoint(697468016,-150228287));
	b.push_back(IntPoint(697613142,-147555189));
	b.push_back(IntPoint(697738058,-144881071));
	b.push_back(IntPoint(697843222,-142206103));
	b.push_back(IntPoint(697933592,-139530595));
	b.push_back(IntPoint(698008887,-136854620));
	b.push_back(IntPoint(698067468,-134178227));
	b.push_back(IntPoint(698105006,-131501456));
	b.push_back(IntPoint(698127461,-128824516));
	b.push_back(IntPoint(698134828,-126147492));
	b.push_back(IntPoint(698125379,-123470475));
	b.push_back(IntPoint(698094983,-120793613));
	b.push_back(IntPoint(698049500,-118116965));
	b.push_back(IntPoint(697988937,-115440616));
	b.push_back(IntPoint(697911460,-112764704));
	b.push_back(IntPoint(697813145,-110089476));
	b.push_back(IntPoint(697701036,-107414790));
	b.push_back(IntPoint(697571328,-104740900));
	b.push_back(IntPoint(697425822,-102067823));
	b.push_back(IntPoint(697259666,-99395950));
	b.push_back(IntPoint(697078483,-96725055));
	b.push_back(IntPoint(696882289,-94055220));
	b.push_back(IntPoint(696668754,-91386715));
	b.push_back(IntPoint(696434894,-88719916));
	b.push_back(IntPoint(696186063,-86054471));
	b.push_back(IntPoint(695922288,-83390464));
	b.push_back(IntPoint(695640724,-80728278));
	b.push_back(IntPoint(695339355,-78068261));
	b.push_back(IntPoint(695023093,-75409974));
	b.push_back(IntPoint(694691974,-72753497));
	b.push_back(IntPoint(694342381,-70099388));
	b.push_back(IntPoint(693976308,-67447501));
	b.push_back(IntPoint(693590348,-64798436));
	b.push_back(IntPoint(693192183,-62151178));
	b.push_back(IntPoint(692774561,-59506919));
	b.push_back(IntPoint(692339007,-56865555));
	b.push_back(IntPoint(691888782,-54226652));
	b.push_back(IntPoint(691423934,-51590285));
	b.push_back(IntPoint(690938284,-48957672));
	b.push_back(IntPoint(690439444,-46327525));
	b.push_back(IntPoint(689919556,-43701458));
	b.push_back(IntPoint(689388457,-41077636));
	b.push_back(IntPoint(688834777,-38458485));
	b.push_back(IntPoint(688266578,-35842445));
	b.push_back(IntPoint(687684019,-33229567));
	b.push_back(IntPoint(687084987,-30620415));
	b.push_back(IntPoint(686466119,-28015897));
	b.push_back(IntPoint(685831681,-25415128));
	b.push_back(IntPoint(685183739,-22817690));
	b.push_back(IntPoint(684516679,-20225096));
	b.push_back(IntPoint(683831957,-17637111));
	b.push_back(IntPoint(683133975,-15052671));
	b.push_back(IntPoint(682420503,-12472463));
	b.push_back(IntPoint(681685414,-9898331));
	b.push_back(IntPoint(680936151,-7328289));
	b.push_back(IntPoint(680174325,-4761943));
	b.push_back(IntPoint(679393636,-2201272));
	b.push_back(IntPoint(678593209,353297));
	b.push_back(IntPoint(677780133,2903869));
	b.push_back(IntPoint(676953667,5450134));
	b.push_back(IntPoint(676107823,7990028));
	b.push_back(IntPoint(675242332,10523294));
	b.push_back(IntPoint(674366258,13052920));
	b.push_back(IntPoint(673472434,15576328));
	b.push_back(IntPoint(672564046,18094531));
	b.push_back(IntPoint(671635309,20605299));
	b.push_back(IntPoint(670696132,23112182));
	b.push_back(IntPoint(669735291,25610840));
	b.push_back(IntPoint(668763151,28105125));
	b.push_back(IntPoint(667774951,30593090));
	b.push_back(IntPoint(666767745,33073423));
	b.push_back(IntPoint(665748554,35548854));
	b.push_back(IntPoint(664711307,38016775));
	b.push_back(IntPoint(663658749,40478204));
	b.push_back(IntPoint(662589570,42932458));
	b.push_back(IntPoint(661507209,45380929));
	b.push_back(IntPoint(660409298,47822466));
	b.push_back(IntPoint(659292533,50255437));
	b.push_back(IntPoint(658165541,52683687));
	b.push_back(IntPoint(657020663,55103556));
	b.push_back(IntPoint(655857130,57514511));
	b.push_back(IntPoint(654684819,59921210));
	b.push_back(IntPoint(653493655,62318633));
	b.push_back(IntPoint(652284104,64706833));
	b.push_back(IntPoint(651065930,67090646));
	b.push_back(IntPoint(649829595,69465090));
	b.push_back(IntPoint(648574718,71829788));
	b.push_back(IntPoint(647310295,74189395));
	b.push_back(IntPoint(646029784,76540311));
	b.push_back(IntPoint(644731106,78881239));
	b.push_back(IntPoint(643420275,81215385));
	b.push_back(IntPoint(642095600,83541701));
	b.push_back(IntPoint(640755465,85859146));
	b.push_back(IntPoint(639398791,88166947));
	b.push_back(IntPoint(638028763,90466846));
	b.push_back(IntPoint(636645677,92758916));
	b.push_back(IntPoint(635246179,95041002));
	b.push_back(IntPoint(633831225,97313538));
	b.push_back(IntPoint(632402064,99577165));
	b.push_back(IntPoint(630963957,101835120));
	b.push_back(IntPoint(629506708,104080769));
	b.push_back(IntPoint(628033167,106315760));
	b.push_back(IntPoint(626549756,108544213));
	b.push_back(IntPoint(625048344,110760578));
	b.push_back(IntPoint(623538685,112971334));
	b.push_back(IntPoint(622011241,115169840));
	b.push_back(IntPoint(620467775,117357127));
	b.push_back(IntPoint(618916487,119538873));
	b.push_back(IntPoint(617343249,121704845));
	b.push_back(IntPoint(615765075,123867223));
	b.push_back(IntPoint(614167237,126015112));
	b.push_back(IntPoint(612557937,128154426));
	b.push_back(IntPoint(610936190,130284320));
	b.push_back(IntPoint(609295959,132400012));
	b.push_back(IntPoint(607647159,134509033));
	b.push_back(IntPoint(605982334,136605427));
	b.push_back(IntPoint(604307343,138693708));
	b.push_back(IntPoint(602617952,140770357));
	b.push_back(IntPoint(600915400,142836229));
	b.push_back(IntPoint(599199565,144891082));
	b.push_back(IntPoint(597470625,146934921));
	b.push_back(IntPoint(595726699,148965989));
	b.push_back(IntPoint(593973764,150989286));
	b.push_back(IntPoint(592202482,152996540));
	b.push_back(IntPoint(590425548,154998794));
	b.push_back(IntPoint(588627612,156982209));
	b.push_back(IntPoint(586826682,158962907));
	b.push_back(IntPoint(585003314,160922968));
	b.push_back(IntPoint(583177038,162880320));
	b.push_back(IntPoint(581330246,164818327));
	b.push_back(IntPoint(579478119,166751236));
	b.push_back(IntPoint(577608107,168666847));
	b.push_back(IntPoint(575730241,170574760));
	b.push_back(IntPoint(573837292,172467709));
	b.push_back(IntPoint(571934032,174350291));
	b.push_back(IntPoint(570018423,176220305));
	b.push_back(IntPoint(568090106,178077212));
	b.push_back(IntPoint(566152100,179924005));
	b.push_back(IntPoint(564199225,181755069));
	b.push_back(IntPoint(562239346,183578632));
	b.push_back(IntPoint(560262788,185384105));
	b.push_back(IntPoint(558281703,187184608));
	b.push_back(IntPoint(556281520,188963872));
	b.push_back(IntPoint(554276593,190737788));
	b.push_back(IntPoint(552255319,192493055));
	b.push_back(IntPoint(550226577,194239686));
	b.push_back(IntPoint(548184714,195970959));
	b.push_back(IntPoint(546132185,197689574));
	b.push_back(IntPoint(544070224,199396861));
	b.push_back(IntPoint(541993934,201086693));
	b.push_back(IntPoint(539909711,202766731));
	b.push_back(IntPoint(537813317,204431556));
	b.push_back(IntPoint(535708117,206085231));
	b.push_back(IntPoint(533593110,207726346));
	b.push_back(IntPoint(531466624,209352560));
	b.push_back(IntPoint(529329646,210964959));
	b.push_back(IntPoint(527183358,212564948));
	b.push_back(IntPoint(525023293,214146286));
	b.push_back(IntPoint(522857961,215720404));
	b.push_back(IntPoint(520679064,217275691));
	b.push_back(IntPoint(518494107,218822454));
	b.push_back(IntPoint(516297222,220352228));
	b.push_back(IntPoint(514088794,221865291));
	b.push_back(IntPoint(511875540,223371285));
	b.push_back(IntPoint(509647183,224854841));
	b.push_back(IntPoint(507414464,226331823));
	b.push_back(IntPoint(505170331,227791404));
	b.push_back(IntPoint(502914643,229233065));
	b.push_back(IntPoint(500654016,230666968));
	b.push_back(IntPoint(498381481,232081921));
	b.push_back(IntPoint(496101715,233485195));
	b.push_back(IntPoint(493812946,234873737));
	b.push_back(IntPoint(491513048,236243766));
	b.push_back(IntPoint(489208450,237605875));
	b.push_back(IntPoint(486892988,238949433));
	b.push_back(IntPoint(484566929,240274560));
	b.push_back(IntPoint(482235510,241590233));
	b.push_back(IntPoint(479895931,242891342));
	b.push_back(IntPoint(477545998,244173654));
	b.push_back(IntPoint(475189026,245442983));
	b.push_back(IntPoint(472825268,246699629));
	b.push_back(IntPoint(470452077,247938370));
	b.push_back(IntPoint(468070903,249161693));
	b.push_back(IntPoint(465683586,250372986));
	b.push_back(IntPoint(463287354,251566546));
	b.push_back(IntPoint(460883189,252744043));
	b.push_back(IntPoint(458473397,253909983));
	b.push_back(IntPoint(456054438,255056781));
	b.push_back(IntPoint(453628512,256188768));
	b.push_back(IntPoint(451197299,257309356));
	b.push_back(IntPoint(448756136,258408099));
	b.push_back(IntPoint(446309785,259495240));
	b.push_back(IntPoint(443857510,260568953));
	b.push_back(IntPoint(441396081,261621512));
	b.push_back(IntPoint(438930491,262664286));
	b.push_back(IntPoint(436456623,263687265));
	b.push_back(IntPoint(433976290,264694471));
	b.push_back(IntPoint(431490036,265686967));
	b.push_back(IntPoint(428997716,266664134));
	b.push_back(IntPoint(426499447,267625987));
	b.push_back(IntPoint(423993936,268568815));
	b.push_back(IntPoint(421484451,269501018));
	b.push_back(IntPoint(418968327,270415145));
	b.push_back(IntPoint(416444958,271309082));
	b.push_back(IntPoint(413916952,272189818));
	b.push_back(IntPoint(411384757,273058438));
	b.push_back(IntPoint(408845641,273906613));
	b.push_back(IntPoint(406300633,274736941));
	b.push_back(IntPoint(403751551,275554676));
	b.push_back(IntPoint(401197826,276357795));
	b.push_back(IntPoint(398638086,277141534));
	b.push_back(IntPoint(396072805,277906937));
	b.push_back(IntPoint(393504125,278660857));
	b.push_back(IntPoint(390929993,279395947));
	b.push_back(IntPoint(388351035,280113922));
	b.push_back(IntPoint(385767901,280816725));
	b.push_back(IntPoint(383181152,281506101));
	b.push_back(IntPoint(380588559,282173162));
	b.push_back(IntPoint(377992288,282825766));
	b.push_back(IntPoint(375392588,283464571));
	b.push_back(IntPoint(372788917,284086992));
	b.push_back(IntPoint(370180086,284687421));
	b.push_back(IntPoint(367568251,285274641));
	b.push_back(IntPoint(364953228,285847497));
	b.push_back(IntPoint(362334077,286401177));
	b.push_back(IntPoint(359711202,286936939));
	b.push_back(IntPoint(357085851,287460430));
	b.push_back(IntPoint(354456795,287964985));
	b.push_back(IntPoint(351824182,288450636));
	b.push_back(IntPoint(349188641,288920145));
	b.push_back(IntPoint(346550537,289375029));
	b.push_back(IntPoint(343909945,289815240));
	b.push_back(IntPoint(341265687,290232863));
	b.push_back(IntPoint(338619134,290635688));
	b.push_back(IntPoint(335970600,291025278));
	b.push_back(IntPoint(333319403,291396311));
	b.push_back(IntPoint(330665390,291746633));
	b.push_back(IntPoint(328009497,292082413));
	b.push_back(IntPoint(325351769,292403333));
	b.push_back(IntPoint(322692079,292707573));
	b.push_back(IntPoint(320030083,292990926));


	Clipper c;
	c.AddPath(a,ptSubject,true);
	c.AddPath(b,ptClip,true);
	Polygons results;
	const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
	assert(r);
	/*
	typedef ClipperLib::Path::const_iterator PIter;
	if (results.size( ) > 0) {
		answer = results.front( );
		std::ofstream log("example.txt");
		for (PIter iter = answer.begin( ); iter != answer.end( ); ++iter) {
			log << '(' << iter->X << ',' << iter->Y << ") " << std::endl;
		}
	}
	*/

	std::ofstream script("clipper85a.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	populate(b1,a);
	populate(b2,b);
	b1.close( );
	b2.close( );
	script << matlabBridge::FigureName("85a") << b1 << b2; 
	for (ClipperLib::Paths::const_iterator pIter = results.begin( ); pIter != results.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans("r");
		ClipperLib::Path answer = *pIter;
		populate(ans,answer);
		ans.close( );
		script << ans;
	}
	script << std::flush;
}
TEST(clipper,m85b){
	using namespace ClipperLib;

	ClipperLib::Path a; 
	ClipperLib::Path b;

	a.push_back(IntPoint(759250056,-205444067));
	a.push_back(IntPoint(669926526,-205444068));
	a.push_back(IntPoint(669926526,-223308774));
	a.push_back(IntPoint(759250056,-223308773));
	a.push_back(IntPoint(759250056,-205444067));
	b.push_back(IntPoint(320030083,292990926));
	b.push_back(IntPoint(317366541,293259361));
	b.push_back(IntPoint(314701536,293512851));
	b.push_back(IntPoint(312034943,293749062));
	b.push_back(IntPoint(309366625,293964906));
	b.push_back(IntPoint(306697136,294165760));
	b.push_back(IntPoint(304026561,294351602));
	b.push_back(IntPoint(301354815,294519785));
	b.push_back(IntPoint(298681882,294667924));
	b.push_back(IntPoint(296008245,294802739));
	b.push_back(IntPoint(293333739,294919060));
	b.push_back(IntPoint(290658579,295019214));
	b.push_back(IntPoint(287982750,295099512));
	b.push_back(IntPoint(285306510,295164735));
	b.push_back(IntPoint(282629946,295214876));
	b.push_back(IntPoint(279953105,295247002));
	b.push_back(IntPoint(277276099,295259382));
	b.push_back(IntPoint(274599066,295256674));
	b.push_back(IntPoint(271922091,295238879));
	b.push_back(IntPoint(269245298,295202976));
	b.push_back(IntPoint(266568840,295147420));
	b.push_back(IntPoint(263892738,295076784));
	b.push_back(IntPoint(261217077,294991074));
	b.push_back(IntPoint(258542061,294887142));
	b.push_back(IntPoint(255867717,294767147));
	b.push_back(IntPoint(253194450,294625187));
	b.push_back(IntPoint(250521823,294471642));
	b.push_back(IntPoint(247850317,294299681));
	b.push_back(IntPoint(245180123,294108435));
	b.push_back(IntPoint(242511046,293902181));
	b.push_back(IntPoint(239843170,293680941));
	b.push_back(IntPoint(237176915,293440951));
	b.push_back(IntPoint(234512428,293182069));
	b.push_back(IntPoint(231849435,292908245));
	b.push_back(IntPoint(229188017,292619508));
	b.push_back(IntPoint(226528763,292311489));
	b.push_back(IntPoint(223871689,291985190));
	b.push_back(IntPoint(221216482,291644036));
	b.push_back(IntPoint(218563094,291289007));
	b.push_back(IntPoint(215912634,290912745));
	b.push_back(IntPoint(213264777,290518584));
	b.push_back(IntPoint(210619044,290110402));
	b.push_back(IntPoint(207975622,289687518));
	b.push_back(IntPoint(205335677,289243442));
	b.push_back(IntPoint(202698500,288783216));
	b.push_back(IntPoint(200063916,288308374));
	b.push_back(IntPoint(197432002,287818945));
	b.push_back(IntPoint(194804173,287308035));
	b.push_back(IntPoint(192179680,286780257));
	b.push_back(IntPoint(189557896,286239186));
	b.push_back(IntPoint(186939547,285681729));
	b.push_back(IntPoint(184325689,285103575));
	b.push_back(IntPoint(181714990,284511323));
	b.push_back(IntPoint(179107693,283904272));
	b.push_back(IntPoint(176504756,283278786));
	b.push_back(IntPoint(173906264,282635087));
	b.push_back(IntPoint(171311320,281977227));
	b.push_back(IntPoint(168719974,281305336));
	b.push_back(IntPoint(166134034,280612931));
	b.push_back(IntPoint(163552816,279903125));
	b.push_back(IntPoint(160975146,279180539));
	b.push_back(IntPoint(158402096,278441671));
	b.push_back(IntPoint(155834949,277682547));
	b.push_back(IntPoint(153270839,276913228));
	b.push_back(IntPoint(150713085,276123036));
	b.push_back(IntPoint(148160551,275316139));
	b.push_back(IntPoint(145613130,274493242));
	b.push_back(IntPoint(143069543,273658572));
	b.push_back(IntPoint(140532179,272805169));
	b.push_back(IntPoint(138001528,271932063));
	b.push_back(IntPoint(135475309,271046211));
	b.push_back(IntPoint(132953595,270147619));
	b.push_back(IntPoint(130439377,269228262));
	b.push_back(IntPoint(127931410,268291985));
	b.push_back(IntPoint(125427802,267344114));
	b.push_back(IntPoint(122930953,266378580));
	b.push_back(IntPoint(120441520,265394083));
	b.push_back(IntPoint(117956408,264398728));
	b.push_back(IntPoint(115477613,263387744));
	b.push_back(IntPoint(113006155,262358955));
	b.push_back(IntPoint(110542336,261312004));
	b.push_back(IntPoint(108082609,260255474));
	b.push_back(IntPoint(105631573,259178935));
	b.push_back(IntPoint(103188288,258084921));
	b.push_back(IntPoint(100749334,256981285));
	b.push_back(IntPoint(98319740,255857191));
	b.push_back(IntPoint(95896931,254718547));
	b.push_back(IntPoint(93479587,253568348));
	b.push_back(IntPoint(91071628,252398629));
	b.push_back(IntPoint(88670674,251214595));
	b.push_back(IntPoint(86276001,250017911));
	b.push_back(IntPoint(83890606,248802839));
	b.push_back(IntPoint(81512769,247573042));
	b.push_back(IntPoint(79141128,246331336));
	b.push_back(IntPoint(76779009,245071611));
	b.push_back(IntPoint(74425618,243795656));
	b.push_back(IntPoint(72077509,242510006));
	b.push_back(IntPoint(69738980,241207013));
	b.push_back(IntPoint(67411428,239884509));
	b.push_back(IntPoint(65087869,238555005));
	b.push_back(IntPoint(62775423,237206262));
	b.push_back(IntPoint(60472874,235840692));
	b.push_back(IntPoint(58175231,234466885));
	b.push_back(IntPoint(55890013,233072507));
	b.push_back(IntPoint(53611788,231666733));
	b.push_back(IntPoint(51341450,230248255));
	b.push_back(IntPoint(49084326,228808845));
	b.push_back(IntPoint(46831099,227363340));
	b.push_back(IntPoint(44590376,225898530));
	b.push_back(IntPoint(42359382,224418943));
	b.push_back(IntPoint(40134688,222929901));
	b.push_back(IntPoint(37924074,221420034));
	b.push_back(IntPoint(35717817,219903807));
	b.push_back(IntPoint(33524582,218368804));
	b.push_back(IntPoint(31341218,216819795));
	b.push_back(IntPoint(29166450,215258738));
	b.push_back(IntPoint(27003870,213680841));
	b.push_back(IntPoint(24848542,212093053));
	b.push_back(IntPoint(22703668,210491170));
	b.push_back(IntPoint(20569046,208875651));
	b.push_back(IntPoint(18445968,207244992));
	b.push_back(IntPoint(16332423,205601995));
	b.push_back(IntPoint(14230886,203943667));
	b.push_back(IntPoint(12134799,202278455));
	b.push_back(IntPoint(10056622,200590944));
	b.push_back(IntPoint(7984621,198895856));
	b.push_back(IntPoint(5927004,197183336));
	b.push_back(IntPoint(3876106,195462776));
	b.push_back(IntPoint(1838687,193726274));
	b.push_back(IntPoint(-188413,191977739));
	b.push_back(IntPoint(-2205137,190217247));
	b.push_back(IntPoint(-4208415,188441468));
	b.push_back(IntPoint(-6203941,186656983));
	b.push_back(IntPoint(-8183369,184854658));
	b.push_back(IntPoint(-10155143,183043963));
	b.push_back(IntPoint(-12112752,181217961));
	b.push_back(IntPoint(-14060322,179381257));
	b.push_back(IntPoint(-15996005,177532029));
	b.push_back(IntPoint(-17919050,175669663));
	b.push_back(IntPoint(-19832557,173797497));
	b.push_back(IntPoint(-21730751,171909808));
	b.push_back(IntPoint(-23621820,170014981));
	b.push_back(IntPoint(-25494831,168102302));
	b.push_back(IntPoint(-27363193,166185082));
	b.push_back(IntPoint(-29210683,164247740));
	b.push_back(IntPoint(-31054458,162306862));
	b.push_back(IntPoint(-32877701,160346684));
	b.push_back(IntPoint(-34695996,158381916));
	b.push_back(IntPoint(-36495249,156399695));
	b.push_back(IntPoint(-38287410,154411060));
	b.push_back(IntPoint(-40062667,152407320));
	b.push_back(IntPoint(-41828015,150394844));
	b.push_back(IntPoint(-43579276,148370098));
	b.push_back(IntPoint(-45317100,146333807));
	b.push_back(IntPoint(-47041624,144286241));
	b.push_back(IntPoint(-48753942,142228456));
	b.push_back(IntPoint(-50450939,140158018));
	b.push_back(IntPoint(-52138441,138079834));
	b.push_back(IntPoint(-53809409,135988333));
	b.push_back(IntPoint(-55473139,133891069));
	b.push_back(IntPoint(-57117164,131778324));
	b.push_back(IntPoint(-58750631,129657405));
	b.push_back(IntPoint(-60370721,127526251));
	b.push_back(IntPoint(-61973039,125381702));
	b.push_back(IntPoint(-63569044,123232450));
	b.push_back(IntPoint(-65143162,121067118));
	b.push_back(IntPoint(-66711797,118897810));
	b.push_back(IntPoint(-68261432,116714890));
	b.push_back(IntPoint(-69797468,114522379));
	b.push_back(IntPoint(-71321829,112321734));
	b.push_back(IntPoint(-72827917,110108544));
	b.push_back(IntPoint(-74325674,107889708));
	b.push_back(IntPoint(-75806646,105659633));
	b.push_back(IntPoint(-77272400,103419527));
	b.push_back(IntPoint(-78723852,101170127));
	b.push_back(IntPoint(-80161911,98912141));
	b.push_back(IntPoint(-81586864,96645863));
	b.push_back(IntPoint(-82996277,94369887));
	b.push_back(IntPoint(-84389764,92084125));
	b.push_back(IntPoint(-85768573,89789480));
	b.push_back(IntPoint(-87138223,87489356));
	b.push_back(IntPoint(-88489170,85178197));
	b.push_back(IntPoint(-89822044,82856569));
	b.push_back(IntPoint(-91146720,80530253));
	b.push_back(IntPoint(-92452583,78193325));
	b.push_back(IntPoint(-93742723,75847680));
	b.push_back(IntPoint(-95022046,73496118));
	b.push_back(IntPoint(-96282556,71134418));
	b.push_back(IntPoint(-97529113,68765324));
	b.push_back(IntPoint(-98763083,66389649));
	b.push_back(IntPoint(-99977961,64004155));
	b.push_back(IntPoint(-101179811,61612070));
	b.push_back(IntPoint(-102368428,59213383));
	b.push_back(IntPoint(-103537599,56805157));
	b.push_back(IntPoint(-104693505,54390536));
	b.push_back(IntPoint(-105836769,51969905));
	b.push_back(IntPoint(-106960187,49539999));
	b.push_back(IntPoint(-108068967,47103378));
	b.push_back(IntPoint(-109166878,44661841));
	b.push_back(IntPoint(-110244338,42211211));
	b.push_back(IntPoint(-111305049,39753284));
	b.push_back(IntPoint(-112355780,37291074));
	b.push_back(IntPoint(-113388230,34821143));
	b.push_back(IntPoint(-114400683,32342948));
	b.push_back(IntPoint(-115403256,29860740));
	b.push_back(IntPoint(-116387785,27371319));
	b.push_back(IntPoint(-117356896,24875856));
	b.push_back(IntPoint(-118309041,22373871));
	b.push_back(IntPoint(-119248218,19866989));
	b.push_back(IntPoint(-120167225,17352642));
	b.push_back(IntPoint(-121071992,14833136));
	b.push_back(IntPoint(-121964060,12309107));
	b.push_back(IntPoint(-122835208,9777780));
	b.push_back(IntPoint(-123692440,7241708));
	b.push_back(IntPoint(-124533865,4700347));
	b.push_back(IntPoint(-125359660,2153864));
	b.push_back(IntPoint(-126166054,-398828));
	b.push_back(IntPoint(-126958825,-2955784));
	b.push_back(IntPoint(-127738113,-5516882));
	b.push_back(IntPoint(-128495701,-8084482));
	b.push_back(IntPoint(-129238225,-10656479));
	b.push_back(IntPoint(-129966931,-13232426));
	b.push_back(IntPoint(-130679344,-15812926));
	b.push_back(IntPoint(-131374436,-18398145));
	b.push_back(IntPoint(-132049453,-20988678));
	b.push_back(IntPoint(-132713392,-23582073));
	b.push_back(IntPoint(-133357777,-26180396));
	b.push_back(IntPoint(-133984870,-28782945));
	b.push_back(IntPoint(-134599528,-31388460));
	b.push_back(IntPoint(-135196279,-33998135));
	b.push_back(IntPoint(-135772634,-36612389));
	b.push_back(IntPoint(-136334155,-39229870));
	b.push_back(IntPoint(-136881256,-41850403));
	b.push_back(IntPoint(-137412259,-44474245));
	b.push_back(IntPoint(-137922207,-47102260));
	b.push_back(IntPoint(-138421320,-49732355));
	b.push_back(IntPoint(-138898473,-52366522));
	b.push_back(IntPoint(-139361447,-55003218));
	b.push_back(IntPoint(-139804992,-57643252));
	b.push_back(IntPoint(-140233869,-60285709));
	b.push_back(IntPoint(-140648031,-62930511));
	b.push_back(IntPoint(-141042977,-65578252));
	b.push_back(IntPoint(-141419711,-68228645));
	b.push_back(IntPoint(-141782703,-70880955));
	b.push_back(IntPoint(-142128771,-73535526));
	b.push_back(IntPoint(-142455687,-76192524));
	b.push_back(IntPoint(-142765269,-78851597));
	b.push_back(IntPoint(-143059961,-81512362));
	b.push_back(IntPoint(-143339733,-84174737));
	b.push_back(IntPoint(-143598620,-86839223));
	b.push_back(IntPoint(-143840772,-89505283));
	b.push_back(IntPoint(-144067955,-92172660));
	b.push_back(IntPoint(-144280145,-94841271));
	b.push_back(IntPoint(-144471004,-97511493));
	b.push_back(IntPoint(-144645509,-100182833));
	b.push_back(IntPoint(-144804986,-102855113));
	b.push_back(IntPoint(-144949419,-105528248));
	b.push_back(IntPoint(-145072250,-108202463));
	b.push_back(IntPoint(-145178952,-110877370));
	b.push_back(IntPoint(-145270588,-113552835));
	b.push_back(IntPoint(-145347148,-116228774));
	b.push_back(IntPoint(-145401950,-118905247));
	b.push_back(IntPoint(-145440753,-121582000));
	b.push_back(IntPoint(-145464471,-124258929));
	b.push_back(IntPoint(-145473102,-126935949));
	b.push_back(IntPoint(-145459874,-129612951));
	b.push_back(IntPoint(-145430741,-132289826));
	b.push_back(IntPoint(-145386523,-134966495));
	b.push_back(IntPoint(-145327225,-137642872));
	b.push_back(IntPoint(-145245969,-140318673));
	b.push_back(IntPoint(-145148921,-142993947));
	b.push_back(IntPoint(-145036808,-145668633));
	b.push_back(IntPoint(-144909642,-148342645));
	b.push_back(IntPoint(-144760357,-151015513));
	b.push_back(IntPoint(-144595473,-153687465));
	b.push_back(IntPoint(-144415565,-156358447));
	b.push_back(IntPoint(-144220650,-159028376));
	b.push_back(IntPoint(-144003337,-161696575));
	b.push_back(IntPoint(-143770757,-164363487));
	b.push_back(IntPoint(-143523212,-167029051));
	b.push_back(IntPoint(-143260546,-169693168));
	b.push_back(IntPoint(-142975386,-172354971));
	b.push_back(IntPoint(-142675310,-175015133));
	b.push_back(IntPoint(-142360348,-177673575));
	b.push_back(IntPoint(-142029653,-180330105));
	b.push_back(IntPoint(-141677323,-182983852));
	b.push_back(IntPoint(-141309851,-185635545));
	b.push_back(IntPoint(-140927755,-188285171));
	b.push_back(IntPoint(-140529031,-190932345));
	b.push_back(IntPoint(-140109513,-193576303));
	b.push_back(IntPoint(-139675288,-196217886));
	b.push_back(IntPoint(-139226401,-198857017));
	b.push_back(IntPoint(-138759648,-201493047));
	b.push_back(IntPoint(-138275773,-204125988));
	b.push_back(IntPoint(-137772722,-206755332));
	b.push_back(IntPoint(-137257456,-209382310));
	b.push_back(IntPoint(-136722675,-212005384));
	b.push_back(IntPoint(-136170267,-214624804));
	b.push_back(IntPoint(-135603448,-217241142));
	b.push_back(IntPoint(-135022674,-219854419));
	b.push_back(IntPoint(-134420356,-222462814));
	b.push_back(IntPoint(-133801338,-225067296));
	b.push_back(IntPoint(-133168977,-227668571));
	b.push_back(IntPoint(-132520814,-230265954));
	b.push_back(IntPoint(-131851620,-232857997));
	b.push_back(IntPoint(-131171005,-235447066));
	b.push_back(IntPoint(-130471033,-238030968));
	b.push_back(IntPoint(-129754841,-240610421));
	b.push_back(IntPoint(-129020917,-243184886));
	b.push_back(IntPoint(-128273942,-245755594));
	b.push_back(IntPoint(-127511562,-248321776));
	b.push_back(IntPoint(-126727342,-250881368));
	b.push_back(IntPoint(-125929393,-253436713));
	b.push_back(IntPoint(-125117858,-255987776));
	b.push_back(IntPoint(-124288397,-258533067));
	b.push_back(IntPoint(-123439487,-261071937));
	b.push_back(IntPoint(-122579321,-263607017));
	b.push_back(IntPoint(-121704395,-266137039));
	b.push_back(IntPoint(-120808475,-268659704));
	b.push_back(IntPoint(-119896798,-271176718));
	b.push_back(IntPoint(-118973261,-273689404));
	b.push_back(IntPoint(-118030305,-276194867));
	b.push_back(IntPoint(-117074630,-278695506));
	b.push_back(IntPoint(-116098948,-281188408));
	b.push_back(IntPoint(-115110640,-283676330));
	b.push_back(IntPoint(-114103045,-286156504));
	b.push_back(IntPoint(-113083487,-288631785));
	b.push_back(IntPoint(-112049144,-291100924));
	b.push_back(IntPoint(-110993641,-293561091));
	b.push_back(IntPoint(-109929188,-296017400));
	b.push_back(IntPoint(-108845572,-298465315));
	b.push_back(IntPoint(-107743882,-300905149));
	b.push_back(IntPoint(-106631422,-303340091));
	b.push_back(IntPoint(-105501880,-305767156));
	b.push_back(IntPoint(-104354837,-308186000));
	b.push_back(IntPoint(-103195339,-310598898));
	b.push_back(IntPoint(-102020055,-313004146));
	b.push_back(IntPoint(-100827659,-315400957));
	b.push_back(IntPoint(-99622315,-317791283));
	b.push_back(IntPoint(-98401333,-320173659));
	b.push_back(IntPoint(-97163584,-322547367));
	b.push_back(IntPoint(-95913623,-324914667));
	b.push_back(IntPoint(-94647032,-327273111));
	b.push_back(IntPoint(-93363931,-329622614));
	b.push_back(IntPoint(-92070454,-331966420));
	b.push_back(IntPoint(-90758564,-334299970));
	b.push_back(IntPoint(-89430109,-336624130));
	b.push_back(IntPoint(-88091286,-338942333));
	b.push_back(IntPoint(-86737441,-341251795));
	b.push_back(IntPoint(-85364741,-343550101));
	b.push_back(IntPoint(-83979350,-345840778));
	b.push_back(IntPoint(-82582866,-348124709));
	b.push_back(IntPoint(-81170125,-350398621));
	b.push_back(IntPoint(-79739585,-352661378));
	b.push_back(IntPoint(-78297748,-354916953));
	b.push_back(IntPoint(-76840136,-357162365));
	b.push_back(IntPoint(-75372004,-359400914));
	b.push_back(IntPoint(-73887426,-361628590));
	b.push_back(IntPoint(-72384783,-363844120));
	b.push_back(IntPoint(-70874916,-366054734));
	b.push_back(IntPoint(-69344827,-368251400));
	b.push_back(IntPoint(-67806536,-370442329));
	b.push_back(IntPoint(-66251672,-372621529));
	b.push_back(IntPoint(-64680421,-374788942));
	b.push_back(IntPoint(-63101645,-376950881));
	b.push_back(IntPoint(-61501072,-379096732));
	b.push_back(IntPoint(-59895794,-381239066));
	b.push_back(IntPoint(-58270472,-383366233));
	b.push_back(IntPoint(-56634912,-385485539));
	b.push_back(IntPoint(-54985661,-387594207));
	b.push_back(IntPoint(-53319883,-389689844));
	b.push_back(IntPoint(-51643096,-391776683));
	b.push_back(IntPoint(-49951815,-393851793));
	b.push_back(IntPoint(-48248614,-395917130));
	b.push_back(IntPoint(-46534398,-397973334));
	b.push_back(IntPoint(-44804580,-400016430));
	b.push_back(IntPoint(-43064845,-402051088));
	b.push_back(IntPoint(-41308352,-404071297));
	b.push_back(IntPoint(-39541135,-406082132));
	b.push_back(IntPoint(-37760649,-408081227));
	b.push_back(IntPoint(-35966659,-410068212));
	b.push_back(IntPoint(-34162180,-412045677));
	b.push_back(IntPoint(-32342096,-414008789));
	b.push_back(IntPoint(-30513630,-415964095));
	b.push_back(IntPoint(-28668106,-417903310));
	b.push_back(IntPoint(-26815568,-419835824));
	b.push_back(IntPoint(-24945325,-421751210));
	b.push_back(IntPoint(-23067308,-423658974));
	b.push_back(IntPoint(-21174359,-425551923));
	b.push_back(IntPoint(-19271201,-427434608));
	b.push_back(IntPoint(-17355815,-429304851));
	b.push_back(IntPoint(-15427847,-431162121));
	b.push_back(IntPoint(-13490284,-433009379));
	b.push_back(IntPoint(-11537831,-434840891));
	b.push_back(IntPoint(-9577051,-436663486));
	b.push_back(IntPoint(-7601713,-438470293));
	b.push_back(IntPoint(-5617057,-440266860));
	b.push_back(IntPoint(-3620039,-442049676));
	b.push_back(IntPoint(-1611533,-443819538));
	b.push_back(IntPoint(406646,-445578362));
	b.push_back(IntPoint(2438979,-447320813));
	b.push_back(IntPoint(4477815,-449055650));
	b.push_back(IntPoint(6533948,-450769951));
	b.push_back(IntPoint(8595395,-452477859));
	b.push_back(IntPoint(10670505,-454169140));
	b.push_back(IntPoint(12753203,-455851067));
	b.push_back(IntPoint(14848463,-457517320));
	b.push_back(IntPoint(16953366,-459171373));
	b.push_back(IntPoint(19070335,-460809957));
	b.push_back(IntPoint(21197108,-462435794));
	b.push_back(IntPoint(23335926,-464045753));
	b.push_back(IntPoint(25481777,-465646327));
	b.push_back(IntPoint(27640108,-467230030));
	b.push_back(IntPoint(29805190,-468804493));
	b.push_back(IntPoint(31982726,-470361686));
	b.push_back(IntPoint(34171326,-471903290));
	b.push_back(IntPoint(36365702,-473436660));
	b.push_back(IntPoint(38575239,-474948103));
	b.push_back(IntPoint(40788583,-476453964));
	b.push_back(IntPoint(43014704,-477940873));
	b.push_back(IntPoint(45250928,-479412544));
	b.push_back(IntPoint(47493163,-480875040));
	b.push_back(IntPoint(49748737,-482316877));
	b.push_back(IntPoint(52009323,-483750844));
	b.push_back(IntPoint(54280666,-485167712));
	b.push_back(IntPoint(56563517,-486565962));
	b.push_back(IntPoint(58851234,-487956236));
	b.push_back(IntPoint(61149540,-489328935));
	b.push_back(IntPoint(63456686,-490686723));
	b.push_back(IntPoint(65771905,-492030700));
	b.push_back(IntPoint(68096065,-493359155));
	b.push_back(IntPoint(70427136,-494675443));
	b.push_back(IntPoint(72768220,-495973842));
	b.push_back(IntPoint(75117723,-497256943));
	b.push_back(IntPoint(77473191,-498529061));
	b.push_back(IntPoint(79838487,-499782808));
	b.push_back(IntPoint(82212195,-501020557));
	b.push_back(IntPoint(84591838,-502246856));
	b.push_back(IntPoint(86980144,-503456198));
	b.push_back(IntPoint(89376956,-504648593));
	b.push_back(IntPoint(91779599,-505829194));
	b.push_back(IntPoint(94190571,-506992690));
	b.push_back(IntPoint(96609415,-508139733));
	b.push_back(IntPoint(99033889,-509274826));
	b.push_back(IntPoint(101467107,-510391052));
	b.push_back(IntPoint(103906941,-511492742));
	b.push_back(IntPoint(106352803,-512580985));
	b.push_back(IntPoint(108807072,-513650132));
	b.push_back(IntPoint(111266882,-514706470));
	b.push_back(IntPoint(113734472,-515744502));
	b.push_back(IntPoint(116207770,-516768859));
	b.push_back(IntPoint(118686564,-517779843));
	b.push_back(IntPoint(121173984,-518769417));
	b.push_back(IntPoint(123665177,-519749452));
	b.push_back(IntPoint(126163914,-520710089));
	b.push_back(IntPoint(128669378,-521653045));
	b.push_back(IntPoint(131180345,-522581244));
	b.push_back(IntPoint(133695571,-523497840));
	b.push_back(IntPoint(136218095,-524394157));
	b.push_back(IntPoint(138746731,-525273085));
	b.push_back(IntPoint(141280107,-526138254));
	b.push_back(IntPoint(143818422,-526988822));
	b.push_back(IntPoint(146362838,-527820963));
	b.push_back(IntPoint(148912421,-528637136));
	b.push_back(IntPoint(151466308,-529439740));
	b.push_back(IntPoint(154025900,-530223961));
	b.push_back(IntPoint(156590565,-530991429));
	b.push_back(IntPoint(159160039,-531742637));
	b.push_back(IntPoint(161733172,-532481214));
	b.push_back(IntPoint(164312626,-533197406));
	b.push_back(IntPoint(166895440,-533901380));
	b.push_back(IntPoint(169483105,-534587313));
	b.push_back(IntPoint(172074724,-535258152));
	b.push_back(IntPoint(174671352,-535909329));
	b.push_back(IntPoint(177271490,-536546350));
	b.push_back(IntPoint(179874995,-537169465));
	b.push_back(IntPoint(182482851,-537774112));
	b.push_back(IntPoint(185095484,-538357775));
	b.push_back(IntPoint(187710809,-538929252));
	b.push_back(IntPoint(190329242,-539486315));
	b.push_back(IntPoint(192952317,-540021097));
	b.push_back(IntPoint(195578376,-540541023));
	b.push_back(IntPoint(198207007,-541047788));
	b.push_back(IntPoint(200839096,-541536276));
	b.push_back(IntPoint(203474950,-542004018));
	b.push_back(IntPoint(206113285,-542457564));
	b.push_back(IntPoint(208754098,-542896447));
	b.push_back(IntPoint(211397757,-543317847));
	b.push_back(IntPoint(214044511,-543719347));
	b.push_back(IntPoint(216693460,-544106103));
	b.push_back(IntPoint(219344516,-544478147));
	b.push_back(IntPoint(221998070,-544831932));
	b.push_back(IntPoint(224654188,-545165917));
	b.push_back(IntPoint(227312074,-545485537));
	b.push_back(IntPoint(229971707,-545790271));
	b.push_back(IntPoint(232633490,-546075613));
	b.push_back(IntPoint(235297162,-546342757));
	b.push_back(IntPoint(237962289,-546594961));
	b.push_back(IntPoint(240628791,-546832198));
	b.push_back(IntPoint(243296990,-547049511));
	b.push_back(IntPoint(245966575,-547249085));
	b.push_back(IntPoint(248637239,-547433652));
	b.push_back(IntPoint(251308899,-547603194));
	b.push_back(IntPoint(253981767,-547752478));
	b.push_back(IntPoint(256655554,-547884303));
	b.push_back(IntPoint(259330040,-548001075));
	b.push_back(IntPoint(262005141,-548102781));
	b.push_back(IntPoint(264680942,-548184037));
	b.push_back(IntPoint(267357212,-548247994));
	b.push_back(IntPoint(270033800,-548296870));
	b.push_back(IntPoint(272710620,-548330661));
	b.push_back(IntPoint(275387622,-548343888));
	b.push_back(IntPoint(278064653,-548339916));
	b.push_back(IntPoint(280741619,-548320857));
	b.push_back(IntPoint(283418436,-548286712));
	b.push_back(IntPoint(286094909,-548231910));
	b.push_back(IntPoint(288770977,-548160008));
	b.push_back(IntPoint(291446598,-548073030));
	b.push_back(IntPoint(294121686,-547970987));
	b.push_back(IntPoint(296795901,-547848156));
	b.push_back(IntPoint(299469284,-547708380));
	b.push_back(IntPoint(302141837,-547553561));
	b.push_back(IntPoint(304813478,-547383716));
	b.push_back(IntPoint(307483700,-547192856));
	b.push_back(IntPoint(310152677,-546985323));
	b.push_back(IntPoint(312820447,-546762799));
	b.push_back(IntPoint(315486926,-546525307));
	b.push_back(IntPoint(318151412,-546266419));
	b.push_back(IntPoint(320814272,-545991305));
	b.push_back(IntPoint(323475549,-545701271));
	b.push_back(IntPoint(326135161,-545396349));
	b.push_back(IntPoint(328792158,-545069432));
	b.push_back(IntPoint(331447393,-544728495));
	b.push_back(IntPoint(334100273,-544369688));
	b.push_back(IntPoint(336751297,-543997419));
	b.push_back(IntPoint(339399066,-543602669));
	b.push_back(IntPoint(342044594,-543193163));
	b.push_back(IntPoint(344687802,-542768946));
	b.push_back(IntPoint(347328380,-542328647));
	b.push_back(IntPoint(349965324,-541867086));
	b.push_back(IntPoint(352600175,-541393725));
	b.push_back(IntPoint(355231312,-540900135));
	b.push_back(IntPoint(357859641,-540391808));
	b.push_back(IntPoint(360484096,-539863842));
	b.push_back(IntPoint(363105597,-539321398));
	b.push_back(IntPoint(365724073,-538764538));
	b.push_back(IntPoint(368338327,-538188183));
	b.push_back(IntPoint(370949277,-537597035));
	b.push_back(IntPoint(373555664,-536986089));
	b.push_back(IntPoint(376159333,-536363657));
	b.push_back(IntPoint(378757656,-535719273));
	b.push_back(IntPoint(381352238,-535059990));
	b.push_back(IntPoint(383943648,-534388348));
	b.push_back(IntPoint(386529977,-533697393));
	b.push_back(IntPoint(389110974,-532986784));
	b.push_back(IntPoint(391688233,-532262736));
	b.push_back(IntPoint(394261561,-531524836));
	b.push_back(IntPoint(396829161,-530767248));
	b.push_back(IntPoint(399391682,-529992650));
	b.push_back(IntPoint(401950078,-529204538));
	b.push_back(IntPoint(404503803,-528401419));
	b.push_back(IntPoint(407050735,-527577010));
	b.push_back(IntPoint(409593753,-526740608));
	b.push_back(IntPoint(412131274,-525887672));
	b.push_back(IntPoint(414662600,-525016524));
	b.push_back(IntPoint(417188270,-524129110));
	b.push_back(IntPoint(419709489,-523229128));
	b.push_back(IntPoint(422224529,-522312023));
	b.push_back(IntPoint(424732396,-521375477));
	b.push_back(IntPoint(427235911,-520427361));
	b.push_back(IntPoint(429733422,-519463542));
	b.push_back(IntPoint(432222843,-518479012));
	b.push_back(IntPoint(434706926,-517481094));
	b.push_back(IntPoint(437186413,-516471809));
	b.push_back(IntPoint(439657187,-515441377));
	b.push_back(IntPoint(442121153,-514394773));
	b.push_back(IntPoint(444580656,-513337723));
	b.push_back(IntPoint(447032310,-512262591));
	b.push_back(IntPoint(449475339,-511168005));
	b.push_back(IntPoint(451913848,-510063384));
	b.push_back(IntPoint(454345256,-508943220));
	b.push_back(IntPoint(456766787,-507801862));
	b.push_back(IntPoint(459183505,-506650347));
	b.push_back(IntPoint(461593524,-505484878));
	b.push_back(IntPoint(463992820,-504297489));
	b.push_back(IntPoint(466387104,-503100028));
	b.push_back(IntPoint(468774570,-501889030));
	b.push_back(IntPoint(471150792,-500656113));
	b.push_back(IntPoint(473522080,-499413735));
	b.push_back(IntPoint(475885800,-498157016));
	b.push_back(IntPoint(478238096,-496879043));
	b.push_back(IntPoint(480585816,-495592684));
	b.push_back(IntPoint(482924565,-494290084));
	b.push_back(IntPoint(485252173,-492967680));
	b.push_back(IntPoint(487575643,-491638019));
	b.push_back(IntPoint(489888160,-490289399));
	b.push_back(IntPoint(492190524,-488923518));
	b.push_back(IntPoint(494488062,-487549535));
	b.push_back(IntPoint(496773824,-486156047));
	b.push_back(IntPoint(499052139,-484750419));
	b.push_back(IntPoint(501321786,-483330837));
	b.push_back(IntPoint(503579772,-481892778));
	b.push_back(IntPoint(505832571,-480446609));
	b.push_back(IntPoint(508073982,-478982850));
	b.push_back(IntPoint(510305080,-477503420));
	b.push_back(IntPoint(512527389,-476010820));
	b.push_back(IntPoint(514740579,-474504732));
	b.push_back(IntPoint(516944846,-472985615));
	b.push_back(IntPoint(519139679,-471452899));
	b.push_back(IntPoint(521323923,-469905129));
	b.push_back(IntPoint(523495792,-468340042));
	b.push_back(IntPoint(525661124,-466765924));
	b.push_back(IntPoint(527813915,-465174697));
	b.push_back(IntPoint(529960791,-463575499));
	b.push_back(IntPoint(532093715,-461957738));
	b.push_back(IntPoint(534216963,-460327300));
	b.push_back(IntPoint(536331518,-458685603));
	b.push_back(IntPoint(538431112,-457024816));
	b.push_back(IntPoint(540526412,-455358613));
	b.push_back(IntPoint(542604596,-453671111));
	b.push_back(IntPoint(544679199,-451979209));
	b.push_back(IntPoint(546736996,-450266905));
	b.push_back(IntPoint(548788076,-448546561));
	b.push_back(IntPoint(550825682,-446810280));
	b.push_back(IntPoint(552852966,-445061957));
	b.push_back(IntPoint(554869067,-443300751));
	b.push_back(IntPoint(556873354,-441526112));
	b.push_back(IntPoint(558865843,-439738236));
	b.push_back(IntPoint(560848723,-437939709));
	b.push_back(IntPoint(562817287,-436125524));
	b.push_back(IntPoint(564778525,-434303422));
	b.push_back(IntPoint(566722847,-432463279));
	b.push_back(IntPoint(568662201,-430617902));
	b.push_back(IntPoint(570581958,-428752146));
	b.push_back(IntPoint(572498689,-426883282));
	b.push_back(IntPoint(574394049,-424992747));
	b.push_back(IntPoint(576286378,-423099178));
	b.push_back(IntPoint(578158544,-421185672));
	b.push_back(IntPoint(580025613,-419267192));
	b.push_back(IntPoint(581874841,-417331509));
	b.push_back(IntPoint(583716313,-415388447));
	b.push_back(IntPoint(585542315,-413430839));
	b.push_back(IntPoint(587357846,-411463516));
	b.push_back(IntPoint(589160323,-409484226));
	b.push_back(IntPoint(590949560,-407492960));
	b.push_back(IntPoint(592727968,-405492016));
	b.push_back(IntPoint(594490788,-403477325));
	b.push_back(IntPoint(596242022,-401452556));
	b.push_back(IntPoint(597980852,-399417125));
	b.push_back(IntPoint(599704186,-397368556));
	b.push_back(IntPoint(601419036,-395312881));
	b.push_back(IntPoint(603116959,-393243202));
	b.push_back(IntPoint(604811564,-391170807));
	b.push_back(IntPoint(606475719,-389073880));
	b.push_back(IntPoint(608136656,-386974404));
	b.push_back(IntPoint(609780895,-384861825));
	b.push_back(IntPoint(611414574,-382741070));
	b.push_back(IntPoint(613034871,-380610072));
	b.push_back(IntPoint(614637406,-378465686));
	b.push_back(IntPoint(616230122,-376313996));
	b.push_back(IntPoint(617808019,-374151416));
	b.push_back(IntPoint(619374338,-371980436));
	b.push_back(IntPoint(620926638,-369799409));
	b.push_back(IntPoint(622462888,-367607048));
	b.push_back(IntPoint(623983290,-365403667));
	b.push_back(IntPoint(625493157,-363193053));
	b.push_back(IntPoint(626987180,-360971700));
	b.push_back(IntPoint(628470280,-358743040));
	b.push_back(IntPoint(629937419,-356503841));
	b.push_back(IntPoint(631386085,-354252646));
	b.push_back(IntPoint(632827922,-351997071));
	b.push_back(IntPoint(634249109,-349728429));
	b.push_back(IntPoint(635658652,-347452533));
	b.push_back(IntPoint(637055884,-345169059));
	b.push_back(IntPoint(638431910,-342872743));
	b.push_back(IntPoint(639800977,-340572272));
	b.push_back(IntPoint(641152049,-338261187));
	b.push_back(IntPoint(642485049,-335939631));
	b.push_back(IntPoint(643810744,-333613896));
	b.push_back(IntPoint(645115777,-331276504));
	b.push_back(IntPoint(646405520,-328930640));
	b.push_back(IntPoint(647686270,-326579856));
	b.push_back(IntPoint(648945996,-324217737));
	b.push_back(IntPoint(650192123,-321848417));
	b.push_back(IntPoint(651426672,-319473043));
	b.push_back(IntPoint(652641745,-317087648));
	b.push_back(IntPoint(653842958,-314695243));
	b.push_back(IntPoint(655031781,-312296658));
	b.push_back(IntPoint(656201501,-309888699));
	b.push_back(IntPoint(657356365,-307473580));
	b.push_back(IntPoint(658499719,-305052991));
	b.push_back(IntPoint(659623813,-302623397));
	b.push_back(IntPoint(660732059,-300186534));
	b.push_back(IntPoint(661830388,-297745185));
	b.push_back(IntPoint(662907776,-295294523));
	b.push_back(IntPoint(663968462,-292836585));
	b.push_back(IntPoint(665019000,-290374293));
	b.push_back(IntPoint(666051625,-287904435));
	b.push_back(IntPoint(667064505,-285426415));
	b.push_back(IntPoint(668064807,-282943290));
	b.push_back(IntPoint(669052984,-280455316));
	b.push_back(IntPoint(670019226,-277958740));
	b.push_back(IntPoint(670971739,-275456895));
	b.push_back(IntPoint(671911866,-272950369));
	b.push_back(IntPoint(672833553,-270437003));
	b.push_back(IntPoint(673735283,-267916409));
	b.push_back(IntPoint(674625793,-265391829));
	b.push_back(IntPoint(675500719,-262861807));
	b.push_back(IntPoint(676358150,-260325801));
	b.push_back(IntPoint(677196291,-257783355));
	b.push_back(IntPoint(678023844,-255237443));
	b.push_back(IntPoint(678830741,-252684910));
	b.push_back(IntPoint(679624886,-250128380));
	b.push_back(IntPoint(680399574,-247565887));
	b.push_back(IntPoint(681161119,-244999457));
	b.push_back(IntPoint(681902226,-242427051));
	b.push_back(IntPoint(682629472,-239850692));
	b.push_back(IntPoint(683344075,-237270798));
	b.push_back(IntPoint(684036568,-234684881));
	b.push_back(IntPoint(684712893,-232094689));
	b.push_back(IntPoint(685375412,-229500931));
	b.push_back(IntPoint(686023575,-226903549));
	b.push_back(IntPoint(686649253,-224300658));
	b.push_back(IntPoint(687261062,-221694473));
	b.push_back(IntPoint(687857875,-219084813));
	b.push_back(IntPoint(688438010,-216471394));
	b.push_back(IntPoint(688998147,-213853617));
	b.push_back(IntPoint(689543877,-211232799));
	b.push_back(IntPoint(690075645,-208609111));
	b.push_back(IntPoint(690588899,-205981740));
	b.push_back(IntPoint(691081312,-203350382));
	b.push_back(IntPoint(691560815,-200716642));
	b.push_back(IntPoint(692025697,-198080282));
	b.push_back(IntPoint(692469774,-195440337));
	b.push_back(IntPoint(692897320,-192797665));
	b.push_back(IntPoint(693310160,-190152655));
	b.push_back(IntPoint(693708339,-187505399));
	b.push_back(IntPoint(694086930,-184855271));
	b.push_back(IntPoint(694444930,-182202283));
	b.push_back(IntPoint(694790744,-179547678));
	b.push_back(IntPoint(695121439,-176891148));
	b.push_back(IntPoint(695429719,-174231923));
	b.push_back(IntPoint(695723117,-171571016));
	b.push_back(IntPoint(696001600,-168908506));
	b.push_back(IntPoint(696264266,-166244389));
	b.push_back(IntPoint(696505131,-163578213));
	b.push_back(IntPoint(696731032,-160910727));
	b.push_back(IntPoint(696941945,-158242014));
	b.push_back(IntPoint(697136582,-155572065));
	b.push_back(IntPoint(697309811,-152900642));
	b.push_back(IntPoint(697468016,-150228287));
	b.push_back(IntPoint(697613142,-147555189));
	b.push_back(IntPoint(697738058,-144881071));
	b.push_back(IntPoint(697843222,-142206103));
	b.push_back(IntPoint(697933592,-139530595));
	b.push_back(IntPoint(698008887,-136854620));
	b.push_back(IntPoint(698067468,-134178227));
	b.push_back(IntPoint(698105006,-131501456));
	b.push_back(IntPoint(698127461,-128824516));
	b.push_back(IntPoint(698134828,-126147492));
	b.push_back(IntPoint(698125379,-123470475));
	b.push_back(IntPoint(698094983,-120793613));
	b.push_back(IntPoint(698049500,-118116965));
	b.push_back(IntPoint(697988937,-115440616));
	b.push_back(IntPoint(697911460,-112764704));
	b.push_back(IntPoint(697813145,-110089476));
	b.push_back(IntPoint(697701036,-107414790));
	b.push_back(IntPoint(697571328,-104740900));
	b.push_back(IntPoint(697425822,-102067823));
	b.push_back(IntPoint(697259666,-99395950));
	b.push_back(IntPoint(697078483,-96725055));
	b.push_back(IntPoint(696882289,-94055220));
	b.push_back(IntPoint(696668754,-91386715));
	b.push_back(IntPoint(696434894,-88719916));
	b.push_back(IntPoint(696186063,-86054471));
	b.push_back(IntPoint(695922288,-83390464));
	b.push_back(IntPoint(695640724,-80728278));
	b.push_back(IntPoint(695339355,-78068261));
	b.push_back(IntPoint(695023093,-75409974));
	b.push_back(IntPoint(694691974,-72753497));
	b.push_back(IntPoint(694342381,-70099388));
	b.push_back(IntPoint(693976308,-67447501));
	b.push_back(IntPoint(693590348,-64798436));
	b.push_back(IntPoint(693192183,-62151178));
	b.push_back(IntPoint(692774561,-59506919));
	b.push_back(IntPoint(692339007,-56865555));
	b.push_back(IntPoint(691888782,-54226652));
	b.push_back(IntPoint(691423934,-51590285));
	b.push_back(IntPoint(690938284,-48957672));
	b.push_back(IntPoint(690439444,-46327525));
	b.push_back(IntPoint(689919556,-43701458));
	b.push_back(IntPoint(689388457,-41077636));
	b.push_back(IntPoint(688834777,-38458485));
	b.push_back(IntPoint(688266578,-35842445));
	b.push_back(IntPoint(687684019,-33229567));
	b.push_back(IntPoint(687084987,-30620415));
	b.push_back(IntPoint(686466119,-28015897));
	b.push_back(IntPoint(685831681,-25415128));
	b.push_back(IntPoint(685183739,-22817690));
	b.push_back(IntPoint(684516679,-20225096));
	b.push_back(IntPoint(683831957,-17637111));
	b.push_back(IntPoint(683133975,-15052671));
	b.push_back(IntPoint(682420503,-12472463));
	b.push_back(IntPoint(681685414,-9898331));
	b.push_back(IntPoint(680936151,-7328289));
	b.push_back(IntPoint(680174325,-4761943));
	b.push_back(IntPoint(679393636,-2201272));
	b.push_back(IntPoint(678593209,353297));
	b.push_back(IntPoint(677780133,2903869));
	b.push_back(IntPoint(676953667,5450134));
	b.push_back(IntPoint(676107823,7990028));
	b.push_back(IntPoint(675242332,10523294));
	b.push_back(IntPoint(674366258,13052920));
	b.push_back(IntPoint(673472434,15576328));
	b.push_back(IntPoint(672564046,18094531));
	b.push_back(IntPoint(671635309,20605299));
	b.push_back(IntPoint(670696132,23112182));
	b.push_back(IntPoint(669735291,25610840));
	b.push_back(IntPoint(668763151,28105125));
	b.push_back(IntPoint(667774951,30593090));
	b.push_back(IntPoint(666767745,33073423));
	b.push_back(IntPoint(665748554,35548854));
	b.push_back(IntPoint(664711307,38016775));
	b.push_back(IntPoint(663658749,40478204));
	b.push_back(IntPoint(662589570,42932458));
	b.push_back(IntPoint(661507209,45380929));
	b.push_back(IntPoint(660409298,47822466));
	b.push_back(IntPoint(659292533,50255437));
	b.push_back(IntPoint(658165541,52683687));
	b.push_back(IntPoint(657020663,55103556));
	b.push_back(IntPoint(655857130,57514511));
	b.push_back(IntPoint(654684819,59921210));
	b.push_back(IntPoint(653493655,62318633));
	b.push_back(IntPoint(652284104,64706833));
	b.push_back(IntPoint(651065930,67090646));
	b.push_back(IntPoint(649829595,69465090));
	b.push_back(IntPoint(648574718,71829788));
	b.push_back(IntPoint(647310295,74189395));
	b.push_back(IntPoint(646029784,76540311));
	b.push_back(IntPoint(644731106,78881239));
	b.push_back(IntPoint(643420275,81215385));
	b.push_back(IntPoint(642095600,83541701));
	b.push_back(IntPoint(640755465,85859146));
	b.push_back(IntPoint(639398791,88166947));
	b.push_back(IntPoint(638028763,90466846));
	b.push_back(IntPoint(636645677,92758916));
	b.push_back(IntPoint(635246179,95041002));
	b.push_back(IntPoint(633831225,97313538));
	b.push_back(IntPoint(632402064,99577165));
	b.push_back(IntPoint(630963957,101835120));
	b.push_back(IntPoint(629506708,104080769));
	b.push_back(IntPoint(628033167,106315760));
	b.push_back(IntPoint(626549756,108544213));
	b.push_back(IntPoint(625048344,110760578));
	b.push_back(IntPoint(623538685,112971334));
	b.push_back(IntPoint(622011241,115169840));
	b.push_back(IntPoint(620467775,117357127));
	b.push_back(IntPoint(618916487,119538873));
	b.push_back(IntPoint(617343249,121704845));
	b.push_back(IntPoint(615765075,123867223));
	b.push_back(IntPoint(614167237,126015112));
	b.push_back(IntPoint(612557937,128154426));
	b.push_back(IntPoint(610936190,130284320));
	b.push_back(IntPoint(609295959,132400012));
	b.push_back(IntPoint(607647159,134509033));
	b.push_back(IntPoint(605982334,136605427));
	b.push_back(IntPoint(604307343,138693708));
	b.push_back(IntPoint(602617952,140770357));
	b.push_back(IntPoint(600915400,142836229));
	b.push_back(IntPoint(599199565,144891082));
	b.push_back(IntPoint(597470625,146934921));
	b.push_back(IntPoint(595726699,148965989));
	b.push_back(IntPoint(593973764,150989286));
	b.push_back(IntPoint(592202482,152996540));
	b.push_back(IntPoint(590425548,154998794));
	b.push_back(IntPoint(588627612,156982209));
	b.push_back(IntPoint(586826682,158962907));
	b.push_back(IntPoint(585003314,160922968));
	b.push_back(IntPoint(583177038,162880320));
	b.push_back(IntPoint(581330246,164818327));
	b.push_back(IntPoint(579478119,166751236));
	b.push_back(IntPoint(577608107,168666847));
	b.push_back(IntPoint(575730241,170574760));
	b.push_back(IntPoint(573837292,172467709));
	b.push_back(IntPoint(571934032,174350291));
	b.push_back(IntPoint(570018423,176220305));
	b.push_back(IntPoint(568090106,178077212));
	b.push_back(IntPoint(566152100,179924005));
	b.push_back(IntPoint(564199225,181755069));
	b.push_back(IntPoint(562239346,183578632));
	b.push_back(IntPoint(560262788,185384105));
	b.push_back(IntPoint(558281703,187184608));
	b.push_back(IntPoint(556281520,188963872));
	b.push_back(IntPoint(554276593,190737788));
	b.push_back(IntPoint(552255319,192493055));
	b.push_back(IntPoint(550226577,194239686));
	b.push_back(IntPoint(548184714,195970959));
	b.push_back(IntPoint(546132185,197689574));
	b.push_back(IntPoint(544070224,199396861));
	b.push_back(IntPoint(541993934,201086693));
	b.push_back(IntPoint(539909711,202766731));
	b.push_back(IntPoint(537813317,204431556));
	b.push_back(IntPoint(535708117,206085231));
	b.push_back(IntPoint(533593110,207726346));
	b.push_back(IntPoint(531466624,209352560));
	b.push_back(IntPoint(529329646,210964959));
	b.push_back(IntPoint(527183358,212564948));
	b.push_back(IntPoint(525023293,214146286));
	b.push_back(IntPoint(522857961,215720404));
	b.push_back(IntPoint(520679064,217275691));
	b.push_back(IntPoint(518494107,218822454));
	b.push_back(IntPoint(516297222,220352228));
	b.push_back(IntPoint(514088794,221865291));
	b.push_back(IntPoint(511875540,223371285));
	b.push_back(IntPoint(509647183,224854841));
	b.push_back(IntPoint(507414464,226331823));
	b.push_back(IntPoint(505170331,227791404));
	b.push_back(IntPoint(502914643,229233065));
	b.push_back(IntPoint(500654016,230666968));
	b.push_back(IntPoint(498381481,232081921));
	b.push_back(IntPoint(496101715,233485195));
	b.push_back(IntPoint(493812946,234873737));
	b.push_back(IntPoint(491513048,236243766));
	b.push_back(IntPoint(489208450,237605875));
	b.push_back(IntPoint(486892988,238949433));
	b.push_back(IntPoint(484566929,240274560));
	b.push_back(IntPoint(482235510,241590233));
	b.push_back(IntPoint(479895931,242891342));
	b.push_back(IntPoint(477545998,244173654));
	b.push_back(IntPoint(475189026,245442983));
	b.push_back(IntPoint(472825268,246699629));
	b.push_back(IntPoint(470452077,247938370));
	b.push_back(IntPoint(468070903,249161693));
	b.push_back(IntPoint(465683586,250372986));
	b.push_back(IntPoint(463287354,251566546));
	b.push_back(IntPoint(460883189,252744043));
	b.push_back(IntPoint(458473397,253909983));
	b.push_back(IntPoint(456054438,255056781));
	b.push_back(IntPoint(453628512,256188768));
	b.push_back(IntPoint(451197299,257309356));
	b.push_back(IntPoint(448756136,258408099));
	b.push_back(IntPoint(446309785,259495240));
	b.push_back(IntPoint(443857510,260568953));
	b.push_back(IntPoint(441396081,261621512));
	b.push_back(IntPoint(438930491,262664286));
	b.push_back(IntPoint(436456623,263687265));
	b.push_back(IntPoint(433976290,264694471));
	b.push_back(IntPoint(431490036,265686967));
	b.push_back(IntPoint(428997716,266664134));
	b.push_back(IntPoint(426499447,267625987));
	b.push_back(IntPoint(423993936,268568815));
	b.push_back(IntPoint(421484451,269501018));
	b.push_back(IntPoint(418968327,270415145));
	b.push_back(IntPoint(416444958,271309082));
	b.push_back(IntPoint(413916952,272189818));
	b.push_back(IntPoint(411384757,273058438));
	b.push_back(IntPoint(408845641,273906613));
	b.push_back(IntPoint(406300633,274736941));
	b.push_back(IntPoint(403751551,275554676));
	b.push_back(IntPoint(401197826,276357795));
	b.push_back(IntPoint(398638086,277141534));
	b.push_back(IntPoint(396072805,277906937));
	b.push_back(IntPoint(393504125,278660857));
	b.push_back(IntPoint(390929993,279395947));
	b.push_back(IntPoint(388351035,280113922));
	b.push_back(IntPoint(385767901,280816725));
	b.push_back(IntPoint(383181152,281506101));
	b.push_back(IntPoint(380588559,282173162));
	b.push_back(IntPoint(377992288,282825766));
	b.push_back(IntPoint(375392588,283464571));
	b.push_back(IntPoint(372788917,284086992));
	b.push_back(IntPoint(370180086,284687421));
	b.push_back(IntPoint(367568251,285274641));
	b.push_back(IntPoint(364953228,285847497));
	b.push_back(IntPoint(362334077,286401177));
	b.push_back(IntPoint(359711202,286936939));
	b.push_back(IntPoint(357085851,287460430));
	b.push_back(IntPoint(354456795,287964985));
	b.push_back(IntPoint(351824182,288450636));
	b.push_back(IntPoint(349188641,288920145));
	b.push_back(IntPoint(346550537,289375029));
	b.push_back(IntPoint(343909945,289815240));
	b.push_back(IntPoint(341265687,290232863));
	b.push_back(IntPoint(338619134,290635688));
	b.push_back(IntPoint(335970600,291025278));
	b.push_back(IntPoint(333319403,291396311));
	b.push_back(IntPoint(330665390,291746633));
	b.push_back(IntPoint(328009497,292082413));
	b.push_back(IntPoint(325351769,292403333));
	b.push_back(IntPoint(322692079,292707573));
	b.push_back(IntPoint(320030083,292990926));


	Clipper c;
	c.AddPath(a,ptSubject,true);
	c.AddPath(b,ptClip,true);
	Polygons results;
	const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
	assert(r);
	/*
	typedef ClipperLib::Path::const_iterator PIter;
	if (results.size( ) > 0) {
		answer = results.front( );
		std::ofstream log("example.txt");
		for (PIter iter = answer.begin( ); iter != answer.end( ); ++iter) {
			log << '(' << iter->X << ',' << iter->Y << ") " << std::endl;
		}
	}
	*/

	std::ofstream script("clipper85b.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	populate(b1,a);
	populate(b2,b);
	b1.close( );
	b2.close( );
	script << matlabBridge::FigureName("clipper85b") << b1 << b2; 
	for (ClipperLib::Paths::const_iterator pIter = results.begin( ); pIter != results.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans("r");
		ClipperLib::Path answer = *pIter;
		populate(ans,answer);
		ans.close( );
		script << ans;
	}
	script << std::flush;
}
/**
* intersection precision testing
*/
TEST(algo,intersectp) {
#ifdef HOLD_FOR_NOW
	typedef std::vector<Point2D> TestPoly;
	const double centerx = 1.0/7;
	const double centery = 2.0/13; 
	spatial::SVector<double,2> down(0,-1); 
	spatial::SVector<double,2> right(0.5,0); 
	Point2D topLeft(centerx - 0.5, 1);
	Point2D topRight = spatial::displacement(topLeft,right * 2);
	Point2D topCenter = spatial::displacement(topLeft,right);

	Point2D bottomLeft = spatial::displacement(topLeft, down);
	Point2D bottomCenter = spatial::displacement(bottomLeft,right);
	Point2D bottomRight = spatial::displacement(bottomLeft,right *2);



	TestPoly box;
	box.push_back(bottomCenter);
	box.push_back(bottomLeft);
	box.push_back(topLeft);
	box.push_back(topCenter);

	TestPoly box2;
	box2.push_back(bottomCenter);
	box2.push_back(topCenter);
	box2.push_back(topRight);
	box2.push_back(bottomRight);

	//std::vector<Point2D> e = ellipse(double centerX, double centerY, double a, double b, const spatial::Angle & angleOfMajor, 
	TestPoly e = ellipse(centerx, centery, 1, 0.5, spatial::DegAngle(0),1);
	spatial::Volume<double,double,2> result;
	spatial::intersections<double,double,TestPoly,TestPoly>(result,box,e);
	ASSERT_TRUE(result.volume( ) > 0);

	spatial::Volume<double,double,2> result2;
	spatial::intersections<double,double,TestPoly,TestPoly>(result2,box2,e);
	ASSERT_TRUE(result2.volume( ) > 0);

	std::ofstream script("intersectp.m");
	script << matlabBridge::FigureName("Intersect p") << matlabBridge::clearFigure;

	matlabBridge::Polygon pbox("g",3);
	matlabBridge::Polygon pbox2("y",3);
	matlabBridge::Polygon pe("m",3);
	frontTierAdapt::copyVectorInto(pbox,box);
	frontTierAdapt::copyVectorInto(pbox2,box2);
	frontTierAdapt::copyVectorInto(pe,e);
	script << pbox << pbox2 << pe;
	spatial::Volume<double,double,2>::VectorOfVectors vOfV = result.points( );
	for (spatial::Volume<double,double,2>::VectorOfVectors::const_iterator vvIter = vOfV.begin( ); vvIter != vOfV.end( );++vvIter) {
		matlabBridge::Polygon pPoly("k",3);
		frontTierAdapt::copyVectorInto(pPoly,*vvIter);
		for (spatial::Volume<double,double,2>::PointVector::const_iterator vIter = vvIter->begin( ); vIter != vvIter->end( );++vIter) {
			const Point2D &p = *vIter;
			//std::cout << p << " dist " << spatial::distance(p,bottomCenter) << std::endl;
			if (spatial::distance(p,bottomCenter)  < 0.01) {
				std::cout << "hit " << &bottomCenter << ", " << &p << std::endl;
			}
		}
		script << pPoly; 
	}
	//std::cout << "second verse" << std::endl;
	vOfV = result2.points( );
	for (spatial::Volume<double,double,2>::VectorOfVectors::const_iterator vvIter = vOfV.begin( ); vvIter != vOfV.end( );++vvIter) {
		matlabBridge::Polygon pPoly("b",3);
		frontTierAdapt::copyVectorInto(pPoly,*vvIter);
		for (spatial::Volume<double,double,2>::PointVector::const_iterator vIter = vvIter->begin( ); vIter != vvIter->end( );++vIter) {
			const Point2D &p = *vIter;
			//std::cout << p << " dist " << spatial::distance(p,bottomCenter) << std::endl;
			if (spatial::distance(p,bottomCenter)  == 0) {
				std::cout << "hit " << &bottomCenter << ", " << &p << std::endl;
			}
		}
		script << pPoly; 
		script << pPoly; 
	}
}
namespace {
	void scaledown(ClipperLib::Path &p) {
		for (ClipperLib::Path::iterator iter = p.begin( ); iter != p.end( );++iter) {
			iter->X /=2;
			iter->Y /=2;
		}
	}
}

TEST(clipper,testcase) {
	using namespace ClipperLib;
	Polygon polyA;
	Polygon polyB;
	polyA.push_back(IntPoint(-350111673235712000,-7939286986110536704));
	polyA.push_back(IntPoint(-350111672573059776,-1163274266659200768));
	polyA.push_back(IntPoint(-485638770871588672,-1163274266659200768));
	polyA.push_back(IntPoint(-621165869170117632,-1298801360662762496));
	polyA.push_back(IntPoint(-3553422551835379712,-7163314728386196480));
	polyA.push_back(IntPoint(-350111673235712000,-7939286986110536704));
	polyB.push_back(IntPoint(-805645495940844032,-1042562189840885120));
	polyB.push_back(IntPoint(-789525366217924864,-1054885693040449280));
	polyB.push_back(IntPoint(-773128044900516096,-1066836971753736832));
	polyB.push_back(IntPoint(-756665441390834688,-1078699097885569280));
	polyB.push_back(IntPoint(-739925597552984576,-1090166104233594880));
	polyB.push_back(IntPoint(-723065516277786112,-1101454671896804864));
	polyB.push_back(IntPoint(-706034715454333440,-1112484903150015232));
	polyB.push_back(IntPoint(-688774538806552832,-1123152437475880320));
	polyB.push_back(IntPoint(-671441569765006720,-1133701281089901312));
	polyB.push_back(IntPoint(-653889015211007232,-1143880904975027584));
	polyB.push_back(IntPoint(-636171541082062848,-1153769412850584320));
	polyB.push_back(IntPoint(-618368350621474560,-1163503951353955584));
	polyB.push_back(IntPoint(-600354419700158080,-1172843426363947264));
	polyB.push_back(IntPoint(-582209437029484032,-1181923164888783616));
	polyB.push_back(IntPoint(-563971396586663680,-1190816160411563264));
	polyB.push_back(IntPoint(-545549721624207360,-1199323180587737344));
	polyB.push_back(IntPoint(-527003583301815872,-1207552812216577536));
	polyB.push_back(IntPoint(-508374006747220352,-1215593338859950848));
	polyB.push_back(IntPoint(-489588472884072128,-1223262882315161600));
	polyB.push_back(IntPoint(-470673541875198656,-1230606558074297088));
	polyB.push_back(IntPoint(-451675208810608640,-1237730259058597632));
	polyB.push_back(IntPoint(-432579580717049536,-1244592072012137472));
	polyB.push_back(IntPoint(-413340554655909120,-1251040668979537152));
	polyB.push_back(IntPoint(-394025555686812736,-1257254396514333184));
	polyB.push_back(IntPoint(-374630934454637568,-1263217142076553472));
	polyB.push_back(IntPoint(-355128110187412608,-1268817797957962752));
	polyB.push_back(IntPoint(-335546876593472704,-1274134253721124096));
	polyB.push_back(IntPoint(-315884037673904832,-1279140791922908416));
	polyB.push_back(IntPoint(-296160575948242560,-1283906561352555264));
	polyB.push_back(IntPoint(-276342167197082976,-1288260386148198144));
	polyB.push_back(IntPoint(-256468620099854912,-1292350221693581568));
	polyB.push_back(IntPoint(-236544455318338336,-1296188105170435328));
	polyB.push_back(IntPoint(-216560182733396544,-1299702011983161600));
	polyB.push_back(IntPoint(-196510915370628000,-1302824185163809792));
	polyB.push_back(IntPoint(-176424446516299744,-1305690758577683200));
	polyB.push_back(IntPoint(-156300607924843904,-1308285004132608256));
	polyB.push_back(IntPoint(-136135915764860672,-1310546130133814528));
	polyB.push_back(IntPoint(-115934816217608272,-1312449180680685312));
	polyB.push_back(IntPoint(-95710253516958480,-1314077297079773696));
	polyB.push_back(IntPoint(-75464922749251728,-1315429545826308352));
	polyB.push_back(IntPoint(-55198946235745320,-1316438355349572096));
	polyB.push_back(IntPoint(-34919135455860688,-1317096605851951104));
	polyB.push_back(IntPoint(-14632721738018770,-1317477843267614720));
	polyB.push_back(IntPoint(5657482380678871,-1317581851126844672));
	polyB.push_back(IntPoint(25947090697894924,-1317338345409913856));
	polyB.push_back(IntPoint(46228960128899896,-1316747704996026880));
	polyB.push_back(IntPoint(66500396707274432,-1315880110543367680));
	polyB.push_back(IntPoint(86758615856882752,-1314736055124691456));
	polyB.push_back(IntPoint(106994475598381776,-1313240233871131904));
	polyB.push_back(IntPoint(127201552785642560,-1311403010815586048));
	polyB.push_back(IntPoint(147381322484617024,-1309291032801204224));
	polyB.push_back(IntPoint(167531176928224256,-1306905519578282752));
	polyB.push_back(IntPoint(187635286823819584,-1304157380934391808));
	polyB.push_back(IntPoint(207691246544198016,-1301082362929003776));
	polyB.push_back(IntPoint(227707023029217120,-1297757115066176512));
	polyB.push_back(IntPoint(247669789298808384,-1294123327987265536));
	polyB.push_back(IntPoint(267562597641278784,-1290122868394923776));
	polyB.push_back(IntPoint(287392471003872384,-1285825636568967936));
	polyB.push_back(IntPoint(307163293626026752,-1281264858900788992));
	polyB.push_back(IntPoint(326869814300975616,-1276429515729096448));
	polyB.push_back(IntPoint(346487453211124800,-1271246104524616192));
	polyB.push_back(IntPoint(366003662509548992,-1265694179892965632));
	polyB.push_back(IntPoint(385462037122170880,-1259943564254672128));
	polyB.push_back(IntPoint(404818372442808512,-1253855889521635328));
	polyB.push_back(IntPoint(424073699681275712,-1247458079555856896));
	polyB.push_back(IntPoint(443230732653420800,-1240772996099539456));
	polyB.push_back(IntPoint(462304420157055360,-1233850428244045568));
	polyB.push_back(IntPoint(481227521333248640,-1226526749825900800));
	polyB.push_back(IntPoint(500078604966003520,-1219021037143934208));
	polyB.push_back(IntPoint(518790697299496704,-1211174659400328192));
	polyB.push_back(IntPoint(537362132566560320,-1202999740879542272));
	polyB.push_back(IntPoint(555830310897337856,-1194596417893439488));
	polyB.push_back(IntPoint(574167507517329792,-1185910729804709632));
	polyB.push_back(IntPoint(592348555089614336,-1176900901289441280));
	polyB.push_back(IntPoint(610407921517729152,-1167651621210917632));
	polyB.push_back(IntPoint(628323896673680384,-1158127419398810368));
	polyB.push_back(IntPoint(646066738240875776,-1148282670858516224));
	polyB.push_back(IntPoint(663697009872836992,-1138239303335232256));
	polyB.push_back(IntPoint(681147608193621504,-1127886361771856512));
	polyB.push_back(IntPoint(698400779077170176,-1117206680355105792));
	polyB.push_back(IntPoint(715544670482684928,-1106354706303699456));
	polyB.push_back(IntPoint(732510232652253440,-1095223794347766784));
	polyB.push_back(IntPoint(749286404996775040,-1083809964358603392));
	polyB.push_back(IntPoint(765865205435924608,-1072112528622453888));
	polyB.push_back(IntPoint(782277157271260672,-1060180414909668992));
	polyB.push_back(IntPoint(798499652782176768,-1047994559359855104));
	polyB.push_back(IntPoint(814592462742915968,-1035635394005036160));
	polyB.push_back(IntPoint(830423237770981760,-1022943350096340352));
	polyB.push_back(IntPoint(846089761350096896,-1010048831311192448));
	polyB.push_back(IntPoint(861545171675356544,-996901871522674432));
	polyB.push_back(IntPoint(876773850422140928,-983493288712640000));
	polyB.push_back(IntPoint(891842639579587840,-969904921904532992));
	polyB.push_back(IntPoint(906632501525968000,-956013664991341312));
	polyB.push_back(IntPoint(921291340166629760,-941984124608123648));
	polyB.push_back(IntPoint(935641382416905216,-927638702539557376));
	polyB.push_back(IntPoint(949865393203038592,-913168612736861952));
	polyB.push_back(IntPoint(963774739944013056,-898395267934403200));
	polyB.push_back(IntPoint(977537128893267584,-883485495264830848));
	polyB.push_back(IntPoint(991005177205717760,-868308660245481088));
	polyB.push_back(IntPoint(1004276744433486208,-852960164806553600));
	polyB.push_back(IntPoint(1017293409090974464,-837394665860800128));
	polyB.push_back(IntPoint(1030051790699884800,-821616478404009088));
	polyB.push_back(IntPoint(1042549435831144576,-805632413464334336));
	polyB.push_back(IntPoint(1054829456639982336,-789479129289444992));
	polyB.push_back(IntPoint(1066841121825282304,-773127195234658432));
	polyB.push_back(IntPoint(1078700790584652416,-756662823880027648));
	polyB.push_back(IntPoint(1090198926857846400,-739944382400888832));
	polyB.push_back(IntPoint(1101435396756425728,-723049554523671936));
	polyB.push_back(IntPoint(1112477044431005312,-706025761840175360));
	polyB.push_back(IntPoint(1123154134193374208,-688771772904675328));
	polyB.push_back(IntPoint(1133689512744737152,-671430861327426944));
	polyB.push_back(IntPoint(1143901625987814528,-653897248434652800));
	polyB.push_back(IntPoint(1153770941487631360,-636168760454980736));
	polyB.push_back(IntPoint(1163500271258406144,-618362778387040640));
	polyB.push_back(IntPoint(1172867881628127744,-600363843169159040));
	polyB.push_back(IntPoint(1181924417227397888,-582206885445977984));
	polyB.push_back(IntPoint(1190816031752896256,-563968143614174848));
	polyB.push_back(IntPoint(1199347230428483840,-545558011417184384));
	polyB.push_back(IntPoint(1207553813162096896,-527001286114086464));
	polyB.push_back(IntPoint(1215574467316312320,-508363452625243200));
	polyB.push_back(IntPoint(1223281750221859072,-489593313525738752));
	polyB.push_back(IntPoint(1230607473396858368,-470671156916540160));
	polyB.push_back(IntPoint(1237727936823826432,-451671660669501120));
	polyB.push_back(IntPoint(1244580930054931712,-432572865302393664));
	polyB.push_back(IntPoint(1251085026009581568,-413352942114825024));
	polyB.push_back(IntPoint(1257255051726035200,-394023445927359168));
	polyB.push_back(IntPoint(1263217751839594240,-374628811113788672));
	polyB.push_back(IntPoint(1268818407721003264,-355125986846563648));
	polyB.push_back(IntPoint(1274135957870563840,-335544840316473600));
	polyB.push_back(IntPoint(1279141315538462464,-315881870655226688));
	polyB.push_back(IntPoint(1283907084968111360,-296158408929564928));
	polyB.push_back(IntPoint(1288260863899356928,-276339989607353504));
	polyB.push_back(IntPoint(1292350653580420352,-256466432951721376));
	polyB.push_back(IntPoint(1296173959222694656,-236539683621785888));
	polyB.push_back(IntPoint(1299687404570960128,-216555109508611200));
	polyB.push_back(IntPoint(1302867232232098816,-196515057487656160));
	polyB.push_back(IntPoint(1305691057567375872,-176422201385933376));
	polyB.push_back(IntPoint(1308285256526435840,-156298357079990528));
	polyB.push_back(IntPoint(1310546382527642368,-136133664920007296));
	polyB.push_back(IntPoint(1312449386478683648,-115932560635115440));
	polyB.push_back(IntPoint(1314077456281970688,-95707994167525888));
	polyB.push_back(IntPoint(1315429658432724992,-75462660598727792));
	polyB.push_back(IntPoint(1316438467955986688,-55196684085221288));
	polyB.push_back(IntPoint(1317096671862603264,-34916871466507360));
	polyB.push_back(IntPoint(1317477862682511104,-14630456869753312));
	polyB.push_back(IntPoint(1317581823945986560,5659747169057355));
	polyB.push_back(IntPoint(1317338318229058560,25949355486273440));
	polyB.push_back(IntPoint(1316747631219415552,46231223878490704));
	polyB.push_back(IntPoint(1315879990170989824,66502658457855040));
	polyB.push_back(IntPoint(1314735888156530944,86760874645680240));
	polyB.push_back(IntPoint(1313240066902971648,106996734387179232));
	polyB.push_back(IntPoint(1311402797251620096,127203807646088480));
	polyB.push_back(IntPoint(1309290772641403136,147383572445077984));
	polyB.push_back(IntPoint(1306905212822609664,167533421010699328));
	polyB.push_back(IntPoint(1304157074178718720,187637530906294656));
	polyB.push_back(IntPoint(1301089189374872320,207694534675683968));
	polyB.push_back(IntPoint(1297736621068670208,227705692773802880));
	polyB.push_back(IntPoint(1294122870477125632,247672064327795840));
	polyB.push_back(IntPoint(1290122410884784384,267564872670266368));
	polyB.push_back(IntPoint(1285825131318390784,287394735908787840));
	polyB.push_back(IntPoint(1281276733877125120,307168584642277568));
	polyB.push_back(IntPoint(1276477689323345408,326883976397732416));
	polyB.push_back(IntPoint(1271192252013009664,346469290741652800));
	polyB.push_back(IntPoint(1265695132005383936,366000391084841600));
	polyB.push_back(IntPoint(1259944586462022912,385458786917592128));
	polyB.push_back(IntPoint(1253856911728986112,404815122238229760));
	polyB.push_back(IntPoint(1247488657633124864,424080161884296192));
	polyB.push_back(IntPoint(1240774232379317504,443227326343121792));
	polyB.push_back(IntPoint(1233851664523825152,462301013846756864));
	polyB.push_back(IntPoint(1226528060656519424,481224143011086336));
	polyB.push_back(IntPoint(1218986312702365440,500060332856069312));
	polyB.push_back(IntPoint(1211176000333166592,518787651024806784));
	polyB.push_back(IntPoint(1203001081812380416,537359086291870272));
	polyB.push_back(IntPoint(1194637834001157376,555845736162080320));
	polyB.push_back(IntPoint(1185912256086542336,574164427613800832));
	polyB.push_back(IntPoint(1176902427571275264,592345475186086144));
	polyB.push_back(IntPoint(1167694588094235136,610426319881294464));
	polyB.push_back(IntPoint(1158129142339177216,628320791479289216));
	polyB.push_back(IntPoint(1148284393798883328,646063633046484480));
	polyB.push_back(IntPoint(1138228420514119936,663686353174728064));
	polyB.push_back(IntPoint(1127889661032288512,681145637929233408));
	polyB.push_back(IntPoint(1117230733280597504,698411638041721856));
	polyB.push_back(IntPoint(1106319572876118528,715517739818968192));
	polyB.push_back(IntPoint(1095222419046307968,732505402329676928));
	polyB.push_back(IntPoint(1083809662062408960,749281887918477312));
	polyB.push_back(IntPoint(1072125094171804800,765870200016344192));
	polyB.push_back(IntPoint(1060230393484296576,782309287468353536));
	polyB.push_back(IntPoint(1047986699806312704,798489072966322432));
	polyB.push_back(IntPoint(1035637096992472704,814589222376828416));
	polyB.push_back(IntPoint(1022912100322412800,830393570943895168));
	polyB.push_back(IntPoint(1010060358725556480,846095197418885376));
	polyB.push_back(IntPoint(996882556780983680,861524239988338944));
	polyB.push_back(IntPoint(983513651031659904,876787752530671232));
	polyB.push_back(IntPoint(969894643730893312,891828732659218048));
	polyB.push_back(IntPoint(956040397056219392,906653261585549440));
	polyB.push_back(IntPoint(941980244244016256,921282693270853888));
	polyB.push_back(IntPoint(927669503184327296,935667317096947712));
	polyB.push_back(IntPoint(913168665752790272,949860130803980928));
	polyB.push_back(IntPoint(898427940958141056,963804040230537728));
	polyB.push_back(IntPoint(883487125883186816,977533207153152768));
	polyB.push_back(IntPoint(868323261280084224,991015544086286848));
	polyB.push_back(IntPoint(852961071874183552,1004271887373839872));
	polyB.push_back(IntPoint(837364121095777280,1017249948870407808));
	polyB.push_back(IntPoint(821614367255978368,1030043414182275584));
	polyB.push_back(IntPoint(805614701726000768,1042520993697804288));
	polyB.push_back(IntPoint(789514552315494784,1054870596511644032));
	polyB.push_back(IntPoint(773145836493013504,1066860719342378112));
	polyB.push_back(IntPoint(756649693914866944,1078675077046567168));
	polyB.push_back(IntPoint(739955296793893504,1090208092771052672));
	polyB.push_back(IntPoint(723036165484448256,1101408177555235840));
	polyB.push_back(IntPoint(706040208358451200,1112492444895805056));
	polyB.push_back(IntPoint(688787250676371584,1123172216479555584));
	polyB.push_back(IntPoint(671420194410158592,1133663748759164544));
	polyB.push_back(IntPoint(653906963704727424,1143910774349745792));
	polyB.push_back(IntPoint(636173445447028992,1153772038467536128));
	polyB.push_back(IntPoint(618357799362834944,1163482680958597888));
	polyB.push_back(IntPoint(600377027630348160,1172885105349854208));
	polyB.push_back(IntPoint(582211023465738112,1181924672397023488));
	polyB.push_back(IntPoint(563963837520470848,1190797917489014528));
	polyB.push_back(IntPoint(545569883963094016,1199363940129079296));
	polyB.push_back(IntPoint(527007025260000384,1207557932386435328));
	polyB.push_back(IntPoint(508354873932967168,1215544058091070464));
	polyB.push_back(IntPoint(489596443429323392,1223279504947883008));
	polyB.push_back(IntPoint(470679475932218432,1230619521392939008));
	polyB.push_back(IntPoint(451668988141633920,1237710431706155520));
	polyB.push_back(IntPoint(432574425002465088,1244573863890054400));
	polyB.push_back(IntPoint(413359960207026880,1251094709727462400));
	polyB.push_back(IntPoint(394025543419410560,1257250294064401664));
	polyB.push_back(IntPoint(374623078736060992,1263185592973043968));
	polyB.push_back(IntPoint(355140368622064576,1268855822890269696));
	polyB.push_back(IntPoint(335544481871483136,1274121177739634432));
	polyB.push_back(IntPoint(315894252890381568,1279152765395871744));
	polyB.push_back(IntPoint(296159746070639552,1283869849919725568));
	polyB.push_back(IntPoint(276355462413740448,1288287750952716288));
	polyB.push_back(IntPoint(256476253880432416,1292352340949957632));
	polyB.push_back(IntPoint(236545027412265472,1296150843141403904));
	polyB.push_back(IntPoint(216564146191681312,1299682590625898240));
	polyB.push_back(IntPoint(196523518839778592,1302860759287625984));
	polyB.push_back(IntPoint(176431128728013824,1305688937416884992));
	polyB.push_back(IntPoint(156304586168528896,1308259248220301568));
	polyB.push_back(IntPoint(136144249636679232,1310556023670188800));
	polyB.push_back(IntPoint(115943582902676768,1312469283768028928));
	polyB.push_back(IntPoint(95716892411374880,1314073865297491968));
	polyB.push_back(IntPoint(75470419589062576,1315402717943710720));
	polyB.push_back(IntPoint(55206911014503728,1316455109559125248));
	polyB.push_back(IntPoint(34926608907058252,1317116053680033792));
	polyB.push_back(IntPoint(14639553061629352,1317474052813219584));
	polyB.push_back(IntPoint(-5650334228032682,1317554842062771200));
	polyB.push_back(IntPoint(-25940233680405664,1317358401766244352));
	polyB.push_back(IntPoint(-46222683753873640,1316767030717325312));
	polyB.push_back(IntPoint(-66493313705998752,1315876138895030528));
	polyB.push_back(IntPoint(-86749753502803392,1314708687363462144));
	polyB.push_back(IntPoint(-106989255753323152,1313265368265636608));
	polyB.push_back(IntPoint(-127196391106116304,1311421681325259264));
	polyB.push_back(IntPoint(-147373836771411040,1309285989131621376));
	polyB.push_back(IntPoint(-167520338816471712,1306876541131052032));
	polyB.push_back(IntPoint(-187633561558004096,1304196007247438080));
	polyB.push_back(IntPoint(-207689135410248480,1301115080029332736));
	polyB.push_back(IntPoint(-227694880233947488,1297728945240577024));
	polyB.push_back(IntPoint(-247656107097808448,1294090391156378880));
	polyB.push_back(IntPoint(-267562780233227040,1290159505075630080));
	polyB.push_back(IntPoint(-287387842975536512,1285837025885596160));
	polyB.push_back(IntPoint(-307152630787361344,1281250557064366592));
	polyB.push_back(IntPoint(-326864165384761024,1276436737063115264));
	polyB.push_back(IntPoint(-346474842703090112,1271226472934981376));
	polyB.push_back(IntPoint(-365997221309858304,1265696498688712704));
	polyB.push_back(IntPoint(-385447065834072640,1259918551863224832));
	polyB.push_back(IntPoint(-404822455705243712,1253892040455799808));
	polyB.push_back(IntPoint(-424079659113215872,1247498399773504256));
	polyB.push_back(IntPoint(-443218886594357632,1240760945053276672));
	polyB.push_back(IntPoint(-462286973667508096,1233825236553459712));
	polyB.push_back(IntPoint(-481230790072642112,1226554794977544192));
	polyB.push_back(IntPoint(-500062514938148416,1219001267864972288));
	polyB.push_back(IntPoint(-518768426005149184,1211141088299578880));
	polyB.push_back(IntPoint(-537370332208817280,1203035745229100288));
	polyB.push_back(IntPoint(-555842757986481408,1194640510395352064));
	polyB.push_back(IntPoint(-574145102951952768,1185881207783436544));
	polyB.push_back(IntPoint(-592360464297086592,1176940955451067648));
	polyB.push_back(IntPoint(-610423118083546624,1167696736765288192));
	polyB.push_back(IntPoint(-628299099251895296,1158097251813298944));
	polyB.push_back(IntPoint(-646080368169063936,1148322080387919872));
	polyB.push_back(IntPoint(-663687911260119552,1138238716272885120));
	polyB.push_back(IntPoint(-681116862330200576,1127849969857249664));
	polyB.push_back(IntPoint(-698412908493947008,1117239866756818560));
	polyB.push_back(IntPoint(-715515138311040000,1106322226078200320));
	polyB.push_back(IntPoint(-732502631975200128,1095225742856775808));
	polyB.push_back(IntPoint(-749284266259951232,1083819913159131520));
	polyB.push_back(IntPoint(-765840534747210752,1072090227218203776));
	polyB.push_back(IntPoint(-782304530628585344,1060230027375102464));
	polyB.push_back(IntPoint(-798483268239338624,1047984346229416960));
	polyB.push_back(IntPoint(-814588434547346304,1035642120367227136));
	polyB.push_back(IntPoint(-830411531515206272,1022940033144045184));
	polyB.push_back(IntPoint(-846081345352063744,1010049828046585088));
	polyB.push_back(IntPoint(-861540138537999872,996906934020082688));
	polyB.push_back(IntPoint(-876772454621750656,983502228484178432));
	polyB.push_back(IntPoint(-891844912942968832,969918061309615744));
	polyB.push_back(IntPoint(-906638691802610176,956030321457716352));
	polyB.push_back(IntPoint(-921273350403871360,941976271577265408));
	polyB.push_back(IntPoint(-935655677057619456,927662775123739136));
	polyB.push_back(IntPoint(-949833340113547392,913148030122348672));
	polyB.push_back(IntPoint(-963797603099154688,898426384155643008));
	polyB.push_back(IntPoint(-977503686919320576,883465128240524672));
	polyB.push_back(IntPoint(-991016908609801856,868328661927390848));
	polyB.push_back(IntPoint(-1004256198418711296,852952263274196736));
	polyB.push_back(IntPoint(-1017262058905250816,837378197072615040));
	polyB.push_back(IntPoint(-1030060467263122432,821632802365908224));
	polyB.push_back(IntPoint(-1042524621047329920,805622033236947200));
	polyB.push_back(IntPoint(-1054883257204766208,789528822282638848));
	polyB.push_back(IntPoint(-1066831595479058048,773128832189848064));
	polyB.push_back(IntPoint(-1078686907098720768,756662033344937984));
	polyB.push_back(IntPoint(-1090188607630336256,739946010745256576));
	polyB.push_back(IntPoint(-1101428370259707136,723053314945368704));
	polyB.push_back(IntPoint(-1112480050613537152,706036713844534784));
	polyB.push_back(IntPoint(-1123159732030287872,688783542960986240));
	polyB.push_back(IntPoint(-1133690829162655744,671440204498571904));
	polyB.push_back(IntPoint(-1143905192196793984,653907844526891904));
	polyB.push_back(IntPoint(-1153770315527169280,636176550641420160));
	polyB.push_back(IntPoint(-1163502822866408448,618372593562573568));
	polyB.push_back(IntPoint(-1172876911171238912,600376650432149376));
	polyB.push_back(IntPoint(-1181923146115190016,582214103369266432));
	polyB.push_back(IntPoint(-1190816039796752128,563976308069655616));
	polyB.push_back(IntPoint(-1199357693345881088,545570666126303808));
	polyB.push_back(IntPoint(-1207556591453597440,527010071534690176));
	polyB.push_back(IntPoint(-1215583103085052416,508374788503505088));
	polyB.push_back(IntPoint(-1223278194117264640,489599821751485696));
	polyB.push_back(IntPoint(-1230618210562319616,470682854254380288));
	polyB.push_back(IntPoint(-1237709195426376960,451672394451932736));
	polyB.push_back(IntPoint(-1244590528728240384,432584027567810368));
	polyB.push_back(IntPoint(-1251069675807598848,413355191050114816));
	polyB.push_back(IntPoint(-1257249271857051392,394028793623987456));
	polyB.push_back(IntPoint(-1263184640860627200,374626350160766720));
	polyB.push_back(IntPoint(-1268854870777850880,355143640046769728));
	polyB.push_back(IntPoint(-1274149472258974720,335555908829155264));
	polyB.push_back(IntPoint(-1279124825321682176,315885035697745600));
	polyB.push_back(IntPoint(-1283870355170303744,296157481165722240));
	polyB.push_back(IntPoint(-1288288256203293952,276353197508823072));
	polyB.push_back(IntPoint(-1292352798460097792,256473978851442976));
	polyB.push_back(IntPoint(-1296161743012133632,236544631104622528));
	polyB.push_back(IntPoint(-1299681336364739584,216561739938114688));
	polyB.push_back(IntPoint(-1302846914838374144,196519120008886784));
	polyB.push_back(IntPoint(-1305689244172558336,176428884645536768));
	polyB.push_back(IntPoint(-1308259508380103168,156302336208066016));
	polyB.push_back(IntPoint(-1310556237234155008,136141994776231376));
	polyB.push_back(IntPoint(-1312469497331994880,115941328042228912));
	polyB.push_back(IntPoint(-1314074032265652480,95714633622575440));
	polyB.push_back(IntPoint(-1315402838316088576,75468157838479984));
	polyB.push_back(IntPoint(-1316455183335736576,55204647264910928));
	polyB.push_back(IntPoint(-1317116127456645120,34924345157465448));
	polyB.push_back(IntPoint(-1317474079994076416,14637288273248866));
	polyB.push_back(IntPoint(-1317554822647875840,-5652599096300146));
	polyB.push_back(IntPoint(-1317358335755591168,-25942497669760952));
	polyB.push_back(IntPoint(-1316766964706674432,-46224947743229000));
	polyB.push_back(IntPoint(-1315876026288614400,-66495575856524712));
	polyB.push_back(IntPoint(-1314708528161265408,-86752012852237984));
	polyB.push_back(IntPoint(-1313265162467637760,-106991511335817952));
	polyB.push_back(IntPoint(-1311421475527260928,-127198646688611168));
	polyB.push_back(IntPoint(-1309285736737793792,-147376087616266464));
	polyB.push_back(IntPoint(-1306876242141359360,-167522583946840128));
	polyB.push_back(IntPoint(-1304194419854964992,-187635613382726624));
	polyB.push_back(IntPoint(-1301098414716456960,-207689098189177376));
	polyB.push_back(IntPoint(-1297768058080866304,-227704077651851840));
	polyB.push_back(IntPoint(-1294089959269538816,-247658294245943744));
	polyB.push_back(IntPoint(-1290159073188791808,-267564967381362720));
	polyB.push_back(IntPoint(-1285836548134435840,-287390020565267616));
	polyB.push_back(IntPoint(-1281250033448811264,-307154797806041088));
	polyB.push_back(IntPoint(-1276410282591717376,-326859631859639040));
	polyB.push_back(IntPoint(-1271250295234879232,-346483557903476992));
	polyB.push_back(IntPoint(-1265695888925671424,-365999344650709056));
	polyB.push_back(IntPoint(-1259917896651522048,-385449175593528000));
	polyB.push_back(IntPoint(-1253888922890785536,-404823749025723904));
	polyB.push_back(IntPoint(-1247453376628586496,-424067221815408000));
	polyB.push_back(IntPoint(-1240767192200484096,-443223844093770944));
	polyB.push_back(IntPoint(-1233824321230897664,-462289358626168192));
	polyB.push_back(IntPoint(-1226553879654982400,-481233175031302208));
	polyB.push_back(IntPoint(-1219015831784185344,-500071440810627776));
	polyB.push_back(IntPoint(-1211140087354058752,-518770723192879872));
	polyB.push_back(IntPoint(-1203034744283580672,-537372629396548288));
	polyB.push_back(IntPoint(-1194581210417058048,-555818303496221056));
	polyB.push_back(IntPoint(-1185879955444822272,-574147654535460608));
	polyB.push_back(IntPoint(-1176939703112452096,-592363015880593792));
	polyB.push_back(IntPoint(-1167637430493475328,-610395717512616704));
	polyB.push_back(IntPoint(-1158095723176251136,-628301879878978560));
	polyB.push_back(IntPoint(-1148320551750872192,-646083148796147328));
	polyB.push_back(IntPoint(-1138234324466299392,-663689330681455488));
	polyB.push_back(IntPoint(-1127848273139755008,-681119628232079360));
	polyB.push_back(IntPoint(-1117238170039323904,-698415674395825536));
	polyB.push_back(IntPoint(-1106365518242819712,-715546732024255872));
	polyB.push_back(IntPoint(-1095215347769248128,-732499045984257408));
	polyB.push_back(IntPoint(-1083806729936940544,-749279121665152640));
	polyB.push_back(IntPoint(-1072087109690130944,-765842128339496832));
	polyB.push_back(IntPoint(-1060224576845303168,-782304443340905472));
	polyB.push_back(IntPoint(-1048016597861527296,-798511215204171648));
	polyB.push_back(IntPoint(-1035630344876225024,-814582543827606656));
	polyB.push_back(IntPoint(-1022959292055407616,-830430419342219520));
	polyB.push_back(IntPoint(-1010026881428562176,-846065430070269952));
	polyB.push_back(IntPoint(-996914620557745920,-861550293596542336));
	polyB.push_back(IntPoint(-983470739792860288,-876748052352838016));
	polyB.push_back(IntPoint(-969916994648317312,-891847994289686656));
	polyB.push_back(IntPoint(-955992689599765632,-906607363433852160));
	polyB.push_back(IntPoint(-941969195877843456,-921271104134772224));
	polyB.push_back(IntPoint(-927621243049996800,-935619056962618752));
	polyB.push_back(IntPoint(-913137303382067456,-949827593269779712));
	polyB.push_back(IntPoint(-898383095388123520,-963757447797794816));
	polyB.push_back(IntPoint(-883452953021188736,-977496391668348928));
	polyB.push_back(IntPoint(-868303426406228096,-990995256214777216));
	polyB.push_back(IntPoint(-852940806849919488,-1004249535790368256));
	polyB.push_back(IntPoint(-837398005472809984,-1017293493612283520));
	polyB.push_back(IntPoint(-821624237135682048,-1030056918296435200));
	polyB.push_back(IntPoint(-805645495940844032,-1042562189840885120));
	int scaleCount = 0;
	Polygons results;
	for (;;) {
		Clipper c;
		bool goodAdd = c.AddPath(polyA,ptSubject,true);
		goodAdd = c.AddPath(polyB,ptClip,true);
		const bool r = c.Execute(ctIntersection ,results,pftEvenOdd,pftEvenOdd);
		assert(r);
		if (results.size( ) > 0) {
			break;
		}
		scaledown(polyA);
		scaledown(polyB);
		++scaleCount;
		std::cout << "scaled down " << scaleCount << std::endl;
	}
	/*
	typedef ClipperLib::Path::const_iterator PIter;
	if (results.size( ) > 0) {
		answer = results.front( );
		std::ofstream log("example.txt");
		for (PIter iter = answer.begin( ); iter != answer.end( ); ++iter) {
			log << '(' << iter->X << ',' << iter->Y << ") " << std::endl;
		}
	}
	*/

	std::ofstream script("clipperExample2.m");
	matlabBridge::TPolygon<long long> b1("g+-");
	matlabBridge::TPolygon<long long> b2("b+-");
	populate(b1,polyA);
	populate(b2,polyB);
	b1.close( );
	b2.close( );
	script << matlabBridge::FigureName("clipperReq2") << b1 << b2; 
	for (ClipperLib::Paths::const_iterator pIter = results.begin( ); pIter != results.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans("r");
		ClipperLib::Path answer = *pIter;
		populate(ans,answer);
		ans.close( );
		script << ans;
	}
	script << std::flush;
#endif
}
TEST(clipper,dual){
	using namespace ClipperLib;

	ClipperLib::Path a; 
	ClipperLib::Path b;
	ClipperLib::Path c;
	a.push_back(IntPoint(955761822,-241173480));
	b.push_back(IntPoint(320030083,292990926));
	b.push_back(IntPoint(317366541,293259361));
	b.push_back(IntPoint(314701536,293512851));
	b.push_back(IntPoint(312034943,293749062));
	b.push_back(IntPoint(309366625,293964906));
	b.push_back(IntPoint(306697136,294165760));
	b.push_back(IntPoint(304026561,294351602));
	b.push_back(IntPoint(301354815,294519785));
	b.push_back(IntPoint(298681882,294667924));
	b.push_back(IntPoint(296008245,294802739));
	b.push_back(IntPoint(293333739,294919060));
	b.push_back(IntPoint(290658579,295019214));
	b.push_back(IntPoint(287982750,295099512));
	b.push_back(IntPoint(285306510,295164735));
	b.push_back(IntPoint(282629946,295214876));
	b.push_back(IntPoint(279953105,295247002));
	b.push_back(IntPoint(277276099,295259382));
	b.push_back(IntPoint(274599066,295256674));
	b.push_back(IntPoint(271922091,295238879));
	b.push_back(IntPoint(269245298,295202976));
	b.push_back(IntPoint(266568840,295147420));
	b.push_back(IntPoint(263892738,295076784));
	b.push_back(IntPoint(261217077,294991074));
	b.push_back(IntPoint(258542061,294887142));
	b.push_back(IntPoint(255867717,294767147));
	b.push_back(IntPoint(253194450,294625187));
	b.push_back(IntPoint(250521823,294471642));
	b.push_back(IntPoint(247850317,294299681));
	b.push_back(IntPoint(245180123,294108435));
	b.push_back(IntPoint(242511046,293902181));
	b.push_back(IntPoint(239843170,293680941));
	b.push_back(IntPoint(237176915,293440951));
	b.push_back(IntPoint(234512428,293182069));
	b.push_back(IntPoint(231849435,292908245));
	b.push_back(IntPoint(229188017,292619508));
	b.push_back(IntPoint(226528763,292311489));
	b.push_back(IntPoint(223871689,291985190));
	b.push_back(IntPoint(221216482,291644036));
	b.push_back(IntPoint(218563094,291289007));
	b.push_back(IntPoint(215912634,290912745));
	b.push_back(IntPoint(213264777,290518584));
	b.push_back(IntPoint(210619044,290110402));
	b.push_back(IntPoint(207975622,289687518));
	b.push_back(IntPoint(205335677,289243442));
	b.push_back(IntPoint(202698500,288783216));
	b.push_back(IntPoint(200063916,288308374));
	b.push_back(IntPoint(197432002,287818945));
	b.push_back(IntPoint(194804173,287308035));
	b.push_back(IntPoint(192179680,286780257));
	b.push_back(IntPoint(189557896,286239186));
	b.push_back(IntPoint(186939547,285681729));
	b.push_back(IntPoint(184325689,285103575));
	b.push_back(IntPoint(181714990,284511323));
	b.push_back(IntPoint(179107693,283904272));
	b.push_back(IntPoint(176504756,283278786));
	b.push_back(IntPoint(173906264,282635087));
	b.push_back(IntPoint(171311320,281977227));
	b.push_back(IntPoint(168719974,281305336));
	b.push_back(IntPoint(166134034,280612931));
	b.push_back(IntPoint(163552816,279903125));
	b.push_back(IntPoint(160975146,279180539));
	b.push_back(IntPoint(158402096,278441671));
	b.push_back(IntPoint(155834949,277682547));
	b.push_back(IntPoint(153270839,276913228));
	b.push_back(IntPoint(150713085,276123036));
	b.push_back(IntPoint(148160551,275316139));
	b.push_back(IntPoint(145613130,274493242));
	b.push_back(IntPoint(143069543,273658572));
	b.push_back(IntPoint(140532179,272805169));
	b.push_back(IntPoint(138001528,271932063));
	b.push_back(IntPoint(135475309,271046211));
	b.push_back(IntPoint(132953595,270147619));
	b.push_back(IntPoint(130439377,269228262));
	b.push_back(IntPoint(127931410,268291985));
	b.push_back(IntPoint(125427802,267344114));
	b.push_back(IntPoint(122930953,266378580));
	b.push_back(IntPoint(120441520,265394083));
	b.push_back(IntPoint(117956408,264398728));
	b.push_back(IntPoint(115477613,263387744));
	b.push_back(IntPoint(113006155,262358955));
	b.push_back(IntPoint(110542336,261312004));
	b.push_back(IntPoint(108082609,260255474));
	b.push_back(IntPoint(105631573,259178935));
	b.push_back(IntPoint(103188288,258084921));
	b.push_back(IntPoint(100749334,256981285));
	b.push_back(IntPoint(98319740,255857191));
	b.push_back(IntPoint(95896931,254718547));
	b.push_back(IntPoint(93479587,253568348));
	b.push_back(IntPoint(91071628,252398629));
	b.push_back(IntPoint(88670674,251214595));
	b.push_back(IntPoint(86276001,250017911));
	b.push_back(IntPoint(83890606,248802839));
	b.push_back(IntPoint(81512769,247573042));
	b.push_back(IntPoint(79141128,246331336));
	b.push_back(IntPoint(76779009,245071611));
	b.push_back(IntPoint(74425618,243795656));
	b.push_back(IntPoint(72077509,242510006));
	b.push_back(IntPoint(69738980,241207013));
	b.push_back(IntPoint(67411428,239884509));
	b.push_back(IntPoint(65087869,238555005));
	b.push_back(IntPoint(62775423,237206262));
	b.push_back(IntPoint(60472874,235840692));
	b.push_back(IntPoint(58175231,234466885));
	b.push_back(IntPoint(55890013,233072507));
	b.push_back(IntPoint(53611788,231666733));
	b.push_back(IntPoint(51341450,230248255));
	b.push_back(IntPoint(49084326,228808845));
	b.push_back(IntPoint(46831099,227363340));
	b.push_back(IntPoint(44590376,225898530));
	b.push_back(IntPoint(42359382,224418943));
	b.push_back(IntPoint(40134688,222929901));
	b.push_back(IntPoint(37924074,221420034));
	b.push_back(IntPoint(35717817,219903807));
	b.push_back(IntPoint(33524582,218368804));
	b.push_back(IntPoint(31341218,216819795));
	b.push_back(IntPoint(29166450,215258738));
	b.push_back(IntPoint(27003870,213680841));
	b.push_back(IntPoint(24848542,212093053));
	b.push_back(IntPoint(22703668,210491170));
	b.push_back(IntPoint(20569046,208875651));
	b.push_back(IntPoint(18445968,207244992));
	b.push_back(IntPoint(16332423,205601995));
	b.push_back(IntPoint(14230886,203943667));
	b.push_back(IntPoint(12134799,202278455));
	b.push_back(IntPoint(10056622,200590944));
	b.push_back(IntPoint(7984621,198895856));
	b.push_back(IntPoint(5927004,197183336));
	b.push_back(IntPoint(3876106,195462776));
	b.push_back(IntPoint(1838687,193726274));
	b.push_back(IntPoint(-188413,191977739));
	b.push_back(IntPoint(-2205137,190217247));
	b.push_back(IntPoint(-4208415,188441468));
	b.push_back(IntPoint(-6203941,186656983));
	b.push_back(IntPoint(-8183369,184854658));
	b.push_back(IntPoint(-10155143,183043963));
	b.push_back(IntPoint(-12112752,181217961));
	b.push_back(IntPoint(-14060322,179381257));
	b.push_back(IntPoint(-15996005,177532029));
	b.push_back(IntPoint(-17919050,175669663));
	b.push_back(IntPoint(-19832557,173797497));
	b.push_back(IntPoint(-21730751,171909808));
	b.push_back(IntPoint(-23621820,170014981));
	b.push_back(IntPoint(-25494831,168102302));
	b.push_back(IntPoint(-27363193,166185082));
	b.push_back(IntPoint(-29210683,164247740));
	b.push_back(IntPoint(-31054458,162306862));
	b.push_back(IntPoint(-32877701,160346684));
	b.push_back(IntPoint(-34695996,158381916));
	b.push_back(IntPoint(-36495249,156399695));
	b.push_back(IntPoint(-38287410,154411060));
	b.push_back(IntPoint(-40062667,152407320));
	b.push_back(IntPoint(-41828015,150394844));
	b.push_back(IntPoint(-43579276,148370098));
	b.push_back(IntPoint(-45317100,146333807));
	b.push_back(IntPoint(-47041624,144286241));
	b.push_back(IntPoint(-48753942,142228456));
	b.push_back(IntPoint(-50450939,140158018));
	b.push_back(IntPoint(-52138441,138079834));
	b.push_back(IntPoint(-53809409,135988333));
	b.push_back(IntPoint(-55473139,133891069));
	b.push_back(IntPoint(-57117164,131778324));
	b.push_back(IntPoint(-58750631,129657405));
	b.push_back(IntPoint(-60370721,127526251));
	b.push_back(IntPoint(-61973039,125381702));
	b.push_back(IntPoint(-63569044,123232450));
	b.push_back(IntPoint(-65143162,121067118));
	b.push_back(IntPoint(-66711797,118897810));
	b.push_back(IntPoint(-68261432,116714890));
	b.push_back(IntPoint(-69797468,114522379));
	b.push_back(IntPoint(-71321829,112321734));
	b.push_back(IntPoint(-72827917,110108544));
	b.push_back(IntPoint(-74325674,107889708));
	b.push_back(IntPoint(-75806646,105659633));
	b.push_back(IntPoint(-77272400,103419527));
	b.push_back(IntPoint(-78723852,101170127));
	b.push_back(IntPoint(-80161911,98912141));
	b.push_back(IntPoint(-81586864,96645863));
	b.push_back(IntPoint(-82996277,94369887));
	b.push_back(IntPoint(-84389764,92084125));
	b.push_back(IntPoint(-85768573,89789480));
	b.push_back(IntPoint(-87138223,87489356));
	b.push_back(IntPoint(-88489170,85178197));
	b.push_back(IntPoint(-89822044,82856569));
	b.push_back(IntPoint(-91146720,80530253));
	b.push_back(IntPoint(-92452583,78193325));
	b.push_back(IntPoint(-93742723,75847680));
	b.push_back(IntPoint(-95022046,73496118));
	b.push_back(IntPoint(-96282556,71134418));
	b.push_back(IntPoint(-97529113,68765324));
	b.push_back(IntPoint(-98763083,66389649));
	b.push_back(IntPoint(-99977961,64004155));
	b.push_back(IntPoint(-101179811,61612070));
	b.push_back(IntPoint(-102368428,59213383));
	b.push_back(IntPoint(-103537599,56805157));
	b.push_back(IntPoint(-104693505,54390536));
	b.push_back(IntPoint(-105836769,51969905));
	b.push_back(IntPoint(-106960187,49539999));
	b.push_back(IntPoint(-108068967,47103378));
	b.push_back(IntPoint(-109166878,44661841));
	b.push_back(IntPoint(-110244338,42211211));
	b.push_back(IntPoint(-111305049,39753284));
	b.push_back(IntPoint(-112355780,37291074));
	b.push_back(IntPoint(-113388230,34821143));
	b.push_back(IntPoint(-114400683,32342948));
	b.push_back(IntPoint(-115403256,29860740));
	b.push_back(IntPoint(-116387785,27371319));
	b.push_back(IntPoint(-117356896,24875856));
	b.push_back(IntPoint(-118309041,22373871));
	b.push_back(IntPoint(-119248218,19866989));
	b.push_back(IntPoint(-120167225,17352642));
	b.push_back(IntPoint(-121071992,14833136));
	b.push_back(IntPoint(-121964060,12309107));
	b.push_back(IntPoint(-122835208,9777780));
	b.push_back(IntPoint(-123692440,7241708));
	b.push_back(IntPoint(-124533865,4700347));
	b.push_back(IntPoint(-125359660,2153864));
	b.push_back(IntPoint(-126166054,-398828));
	b.push_back(IntPoint(-126958825,-2955784));
	b.push_back(IntPoint(-127738113,-5516882));
	b.push_back(IntPoint(-128495701,-8084482));
	b.push_back(IntPoint(-129238225,-10656479));
	b.push_back(IntPoint(-129966931,-13232426));
	b.push_back(IntPoint(-130679344,-15812926));
	b.push_back(IntPoint(-131374436,-18398145));
	b.push_back(IntPoint(-132049453,-20988678));
	b.push_back(IntPoint(-132713392,-23582073));
	b.push_back(IntPoint(-133357777,-26180396));
	b.push_back(IntPoint(-133984870,-28782945));
	b.push_back(IntPoint(-134599528,-31388460));
	b.push_back(IntPoint(-135196279,-33998135));
	b.push_back(IntPoint(-135772634,-36612389));
	b.push_back(IntPoint(-136334155,-39229870));
	b.push_back(IntPoint(-136881256,-41850403));
	b.push_back(IntPoint(-137412259,-44474245));
	b.push_back(IntPoint(-137922207,-47102260));
	b.push_back(IntPoint(-138421320,-49732355));
	b.push_back(IntPoint(-138898473,-52366522));
	b.push_back(IntPoint(-139361447,-55003218));
	b.push_back(IntPoint(-139804992,-57643252));
	b.push_back(IntPoint(-140233869,-60285709));
	b.push_back(IntPoint(-140648031,-62930511));
	b.push_back(IntPoint(-141042977,-65578252));
	b.push_back(IntPoint(-141419711,-68228645));
	b.push_back(IntPoint(-141782703,-70880955));
	b.push_back(IntPoint(-142128771,-73535526));
	b.push_back(IntPoint(-142455687,-76192524));
	b.push_back(IntPoint(-142765269,-78851597));
	b.push_back(IntPoint(-143059961,-81512362));
	b.push_back(IntPoint(-143339733,-84174737));
	b.push_back(IntPoint(-143598620,-86839223));
	b.push_back(IntPoint(-143840772,-89505283));
	b.push_back(IntPoint(-144067955,-92172660));
	b.push_back(IntPoint(-144280145,-94841271));
	b.push_back(IntPoint(-144471004,-97511493));
	b.push_back(IntPoint(-144645509,-100182833));
	b.push_back(IntPoint(-144804986,-102855113));
	b.push_back(IntPoint(-144949419,-105528248));
	b.push_back(IntPoint(-145072250,-108202463));
	b.push_back(IntPoint(-145178952,-110877370));
	b.push_back(IntPoint(-145270588,-113552835));
	b.push_back(IntPoint(-145347148,-116228774));
	b.push_back(IntPoint(-145401950,-118905247));
	b.push_back(IntPoint(-145440753,-121582000));
	b.push_back(IntPoint(-145464471,-124258929));
	b.push_back(IntPoint(-145473102,-126935949));
	b.push_back(IntPoint(-145459874,-129612951));
	b.push_back(IntPoint(-145430741,-132289826));
	b.push_back(IntPoint(-145386523,-134966495));
	b.push_back(IntPoint(-145327225,-137642872));
	b.push_back(IntPoint(-145245969,-140318673));
	b.push_back(IntPoint(-145148921,-142993947));
	b.push_back(IntPoint(-145036808,-145668633));
	b.push_back(IntPoint(-144909642,-148342645));
	b.push_back(IntPoint(-144760357,-151015513));
	b.push_back(IntPoint(-144595473,-153687465));
	b.push_back(IntPoint(-144415565,-156358447));
	b.push_back(IntPoint(-144220650,-159028376));
	b.push_back(IntPoint(-144003337,-161696575));
	b.push_back(IntPoint(-143770757,-164363487));
	b.push_back(IntPoint(-143523212,-167029051));
	b.push_back(IntPoint(-143260546,-169693168));
	b.push_back(IntPoint(-142975386,-172354971));
	b.push_back(IntPoint(-142675310,-175015133));
	b.push_back(IntPoint(-142360348,-177673575));
	b.push_back(IntPoint(-142029653,-180330105));
	b.push_back(IntPoint(-141677323,-182983852));
	b.push_back(IntPoint(-141309851,-185635545));
	b.push_back(IntPoint(-140927755,-188285171));
	b.push_back(IntPoint(-140529031,-190932345));
	b.push_back(IntPoint(-140109513,-193576303));
	b.push_back(IntPoint(-139675288,-196217886));
	b.push_back(IntPoint(-139226401,-198857017));
	b.push_back(IntPoint(-138759648,-201493047));
	b.push_back(IntPoint(-138275773,-204125988));
	b.push_back(IntPoint(-137772722,-206755332));
	b.push_back(IntPoint(-137257456,-209382310));
	b.push_back(IntPoint(-136722675,-212005384));
	b.push_back(IntPoint(-136170267,-214624804));
	b.push_back(IntPoint(-135603448,-217241142));
	b.push_back(IntPoint(-135022674,-219854419));
	b.push_back(IntPoint(-134420356,-222462814));
	b.push_back(IntPoint(-133801338,-225067296));
	b.push_back(IntPoint(-133168977,-227668571));
	b.push_back(IntPoint(-132520814,-230265954));
	b.push_back(IntPoint(-131851620,-232857997));
	b.push_back(IntPoint(-131171005,-235447066));
	b.push_back(IntPoint(-130471033,-238030968));
	b.push_back(IntPoint(-129754841,-240610421));
	b.push_back(IntPoint(-129020917,-243184886));
	b.push_back(IntPoint(-128273942,-245755594));
	b.push_back(IntPoint(-127511562,-248321776));
	b.push_back(IntPoint(-126727342,-250881368));
	b.push_back(IntPoint(-125929393,-253436713));
	b.push_back(IntPoint(-125117858,-255987776));
	b.push_back(IntPoint(-124288397,-258533067));
	b.push_back(IntPoint(-123439487,-261071937));
	b.push_back(IntPoint(-122579321,-263607017));
	b.push_back(IntPoint(-121704395,-266137039));
	b.push_back(IntPoint(-120808475,-268659704));
	b.push_back(IntPoint(-119896798,-271176718));
	b.push_back(IntPoint(-118973261,-273689404));
	b.push_back(IntPoint(-118030305,-276194867));
	b.push_back(IntPoint(-117074630,-278695506));
	b.push_back(IntPoint(-116098948,-281188408));
	b.push_back(IntPoint(-115110640,-283676330));
	b.push_back(IntPoint(-114103045,-286156504));
	b.push_back(IntPoint(-113083487,-288631785));
	b.push_back(IntPoint(-112049144,-291100924));
	b.push_back(IntPoint(-110993641,-293561091));
	b.push_back(IntPoint(-109929188,-296017400));
	b.push_back(IntPoint(-108845572,-298465315));
	b.push_back(IntPoint(-107743882,-300905149));
	b.push_back(IntPoint(-106631422,-303340091));
	b.push_back(IntPoint(-105501880,-305767156));
	b.push_back(IntPoint(-104354837,-308186000));
	b.push_back(IntPoint(-103195339,-310598898));
	b.push_back(IntPoint(-102020055,-313004146));
	b.push_back(IntPoint(-100827659,-315400957));
	b.push_back(IntPoint(-99622315,-317791283));
	b.push_back(IntPoint(-98401333,-320173659));
	b.push_back(IntPoint(-97163584,-322547367));
	b.push_back(IntPoint(-95913623,-324914667));
	b.push_back(IntPoint(-94647032,-327273111));
	b.push_back(IntPoint(-93363931,-329622614));
	b.push_back(IntPoint(-92070454,-331966420));
	b.push_back(IntPoint(-90758564,-334299970));
	b.push_back(IntPoint(-89430109,-336624130));
	b.push_back(IntPoint(-88091286,-338942333));
	b.push_back(IntPoint(-86737441,-341251795));
	b.push_back(IntPoint(-85364741,-343550101));
	b.push_back(IntPoint(-83979350,-345840778));
	b.push_back(IntPoint(-82582866,-348124709));
	b.push_back(IntPoint(-81170125,-350398621));
	b.push_back(IntPoint(-79739585,-352661378));
	b.push_back(IntPoint(-78297748,-354916953));
	b.push_back(IntPoint(-76840136,-357162365));
	b.push_back(IntPoint(-75372004,-359400914));
	b.push_back(IntPoint(-73887426,-361628590));
	b.push_back(IntPoint(-72384783,-363844120));
	b.push_back(IntPoint(-70874916,-366054734));
	b.push_back(IntPoint(-69344827,-368251400));
	b.push_back(IntPoint(-67806536,-370442329));
	b.push_back(IntPoint(-66251672,-372621529));
	b.push_back(IntPoint(-64680421,-374788942));
	b.push_back(IntPoint(-63101645,-376950881));
	b.push_back(IntPoint(-61501072,-379096732));
	b.push_back(IntPoint(-59895794,-381239066));
	b.push_back(IntPoint(-58270472,-383366233));
	b.push_back(IntPoint(-56634912,-385485539));
	b.push_back(IntPoint(-54985661,-387594207));
	b.push_back(IntPoint(-53319883,-389689844));
	b.push_back(IntPoint(-51643096,-391776683));
	b.push_back(IntPoint(-49951815,-393851793));
	b.push_back(IntPoint(-48248614,-395917130));
	b.push_back(IntPoint(-46534398,-397973334));
	b.push_back(IntPoint(-44804580,-400016430));
	b.push_back(IntPoint(-43064845,-402051088));
	b.push_back(IntPoint(-41308352,-404071297));
	b.push_back(IntPoint(-39541135,-406082132));
	b.push_back(IntPoint(-37760649,-408081227));
	b.push_back(IntPoint(-35966659,-410068212));
	b.push_back(IntPoint(-34162180,-412045677));
	b.push_back(IntPoint(-32342096,-414008789));
	b.push_back(IntPoint(-30513630,-415964095));
	b.push_back(IntPoint(-28668106,-417903310));
	b.push_back(IntPoint(-26815568,-419835824));
	b.push_back(IntPoint(-24945325,-421751210));
	b.push_back(IntPoint(-23067308,-423658974));
	b.push_back(IntPoint(-21174359,-425551923));
	b.push_back(IntPoint(-19271201,-427434608));
	b.push_back(IntPoint(-17355815,-429304851));
	b.push_back(IntPoint(-15427847,-431162121));
	b.push_back(IntPoint(-13490284,-433009379));
	b.push_back(IntPoint(-11537831,-434840891));
	b.push_back(IntPoint(-9577051,-436663486));
	b.push_back(IntPoint(-7601713,-438470293));
	b.push_back(IntPoint(-5617057,-440266860));
	b.push_back(IntPoint(-3620039,-442049676));
	b.push_back(IntPoint(-1611533,-443819538));
	b.push_back(IntPoint(406646,-445578362));
	b.push_back(IntPoint(2438979,-447320813));
	b.push_back(IntPoint(4477815,-449055650));
	b.push_back(IntPoint(6533948,-450769951));
	b.push_back(IntPoint(8595395,-452477859));
	b.push_back(IntPoint(10670505,-454169140));
	b.push_back(IntPoint(12753203,-455851067));
	b.push_back(IntPoint(14848463,-457517320));
	b.push_back(IntPoint(16953366,-459171373));
	b.push_back(IntPoint(19070335,-460809957));
	b.push_back(IntPoint(21197108,-462435794));
	b.push_back(IntPoint(23335926,-464045753));
	b.push_back(IntPoint(25481777,-465646327));
	b.push_back(IntPoint(27640108,-467230030));
	b.push_back(IntPoint(29805190,-468804493));
	b.push_back(IntPoint(31982726,-470361686));
	b.push_back(IntPoint(34171326,-471903290));
	b.push_back(IntPoint(36365702,-473436660));
	b.push_back(IntPoint(38575239,-474948103));
	b.push_back(IntPoint(40788583,-476453964));
	b.push_back(IntPoint(43014704,-477940873));
	b.push_back(IntPoint(45250928,-479412544));
	b.push_back(IntPoint(47493163,-480875040));
	b.push_back(IntPoint(49748737,-482316877));
	b.push_back(IntPoint(52009323,-483750844));
	b.push_back(IntPoint(54280666,-485167712));
	b.push_back(IntPoint(56563517,-486565962));
	b.push_back(IntPoint(58851234,-487956236));
	b.push_back(IntPoint(61149540,-489328935));
	b.push_back(IntPoint(63456686,-490686723));
	b.push_back(IntPoint(65771905,-492030700));
	b.push_back(IntPoint(68096065,-493359155));
	b.push_back(IntPoint(70427136,-494675443));
	b.push_back(IntPoint(72768220,-495973842));
	b.push_back(IntPoint(75117723,-497256943));
	b.push_back(IntPoint(77473191,-498529061));
	b.push_back(IntPoint(79838487,-499782808));
	b.push_back(IntPoint(82212195,-501020557));
	b.push_back(IntPoint(84591838,-502246856));
	b.push_back(IntPoint(86980144,-503456198));
	b.push_back(IntPoint(89376956,-504648593));
	b.push_back(IntPoint(91779599,-505829194));
	b.push_back(IntPoint(94190571,-506992690));
	b.push_back(IntPoint(96609415,-508139733));
	b.push_back(IntPoint(99033889,-509274826));
	b.push_back(IntPoint(101467107,-510391052));
	b.push_back(IntPoint(103906941,-511492742));
	b.push_back(IntPoint(106352803,-512580985));
	b.push_back(IntPoint(108807072,-513650132));
	b.push_back(IntPoint(111266882,-514706470));
	b.push_back(IntPoint(113734472,-515744502));
	b.push_back(IntPoint(116207770,-516768859));
	b.push_back(IntPoint(118686564,-517779843));
	b.push_back(IntPoint(121173984,-518769417));
	b.push_back(IntPoint(123665177,-519749452));
	b.push_back(IntPoint(126163914,-520710089));
	b.push_back(IntPoint(128669378,-521653045));
	b.push_back(IntPoint(131180345,-522581244));
	b.push_back(IntPoint(133695571,-523497840));
	b.push_back(IntPoint(136218095,-524394157));
	b.push_back(IntPoint(138746731,-525273085));
	b.push_back(IntPoint(141280107,-526138254));
	b.push_back(IntPoint(143818422,-526988822));
	b.push_back(IntPoint(146362838,-527820963));
	b.push_back(IntPoint(148912421,-528637136));
	b.push_back(IntPoint(151466308,-529439740));
	b.push_back(IntPoint(154025900,-530223961));
	b.push_back(IntPoint(156590565,-530991429));
	b.push_back(IntPoint(159160039,-531742637));
	b.push_back(IntPoint(161733172,-532481214));
	b.push_back(IntPoint(164312626,-533197406));
	b.push_back(IntPoint(166895440,-533901380));
	b.push_back(IntPoint(169483105,-534587313));
	b.push_back(IntPoint(172074724,-535258152));
	b.push_back(IntPoint(174671352,-535909329));
	b.push_back(IntPoint(177271490,-536546350));
	b.push_back(IntPoint(179874995,-537169465));
	b.push_back(IntPoint(182482851,-537774112));
	b.push_back(IntPoint(185095484,-538357775));
	b.push_back(IntPoint(187710809,-538929252));
	b.push_back(IntPoint(190329242,-539486315));
	b.push_back(IntPoint(192952317,-540021097));
	b.push_back(IntPoint(195578376,-540541023));
	b.push_back(IntPoint(198207007,-541047788));
	b.push_back(IntPoint(200839096,-541536276));
	b.push_back(IntPoint(203474950,-542004018));
	b.push_back(IntPoint(206113285,-542457564));
	b.push_back(IntPoint(208754098,-542896447));
	b.push_back(IntPoint(211397757,-543317847));
	b.push_back(IntPoint(214044511,-543719347));
	b.push_back(IntPoint(216693460,-544106103));
	b.push_back(IntPoint(219344516,-544478147));
	b.push_back(IntPoint(221998070,-544831932));
	b.push_back(IntPoint(224654188,-545165917));
	b.push_back(IntPoint(227312074,-545485537));
	b.push_back(IntPoint(229971707,-545790271));
	b.push_back(IntPoint(232633490,-546075613));
	b.push_back(IntPoint(235297162,-546342757));
	b.push_back(IntPoint(237962289,-546594961));
	b.push_back(IntPoint(240628791,-546832198));
	b.push_back(IntPoint(243296990,-547049511));
	b.push_back(IntPoint(245966575,-547249085));
	b.push_back(IntPoint(248637239,-547433652));
	b.push_back(IntPoint(251308899,-547603194));
	b.push_back(IntPoint(253981767,-547752478));
	b.push_back(IntPoint(256655554,-547884303));
	b.push_back(IntPoint(259330040,-548001075));
	b.push_back(IntPoint(262005141,-548102781));
	b.push_back(IntPoint(264680942,-548184037));
	b.push_back(IntPoint(267357212,-548247994));
	b.push_back(IntPoint(270033800,-548296870));
	b.push_back(IntPoint(272710620,-548330661));
	b.push_back(IntPoint(275387622,-548343888));
	b.push_back(IntPoint(278064653,-548339916));
	b.push_back(IntPoint(280741619,-548320857));
	b.push_back(IntPoint(283418436,-548286712));
	b.push_back(IntPoint(286094909,-548231910));
	b.push_back(IntPoint(288770977,-548160008));
	b.push_back(IntPoint(291446598,-548073030));
	b.push_back(IntPoint(294121686,-547970987));
	b.push_back(IntPoint(296795901,-547848156));
	b.push_back(IntPoint(299469284,-547708380));
	b.push_back(IntPoint(302141837,-547553561));
	b.push_back(IntPoint(304813478,-547383716));
	b.push_back(IntPoint(307483700,-547192856));
	b.push_back(IntPoint(310152677,-546985323));
	b.push_back(IntPoint(312820447,-546762799));
	b.push_back(IntPoint(315486926,-546525307));
	b.push_back(IntPoint(318151412,-546266419));
	b.push_back(IntPoint(320814272,-545991305));
	b.push_back(IntPoint(323475549,-545701271));
	b.push_back(IntPoint(326135161,-545396349));
	b.push_back(IntPoint(328792158,-545069432));
	b.push_back(IntPoint(331447393,-544728495));
	b.push_back(IntPoint(334100273,-544369688));
	b.push_back(IntPoint(336751297,-543997419));
	b.push_back(IntPoint(339399066,-543602669));
	b.push_back(IntPoint(342044594,-543193163));
	b.push_back(IntPoint(344687802,-542768946));
	b.push_back(IntPoint(347328380,-542328647));
	b.push_back(IntPoint(349965324,-541867086));
	b.push_back(IntPoint(352600175,-541393725));
	b.push_back(IntPoint(355231312,-540900135));
	b.push_back(IntPoint(357859641,-540391808));
	b.push_back(IntPoint(360484096,-539863842));
	b.push_back(IntPoint(363105597,-539321398));
	b.push_back(IntPoint(365724073,-538764538));
	b.push_back(IntPoint(368338327,-538188183));
	b.push_back(IntPoint(370949277,-537597035));
	b.push_back(IntPoint(373555664,-536986089));
	b.push_back(IntPoint(376159333,-536363657));
	b.push_back(IntPoint(378757656,-535719273));
	b.push_back(IntPoint(381352238,-535059990));
	b.push_back(IntPoint(383943648,-534388348));
	b.push_back(IntPoint(386529977,-533697393));
	b.push_back(IntPoint(389110974,-532986784));
	b.push_back(IntPoint(391688233,-532262736));
	b.push_back(IntPoint(394261561,-531524836));
	b.push_back(IntPoint(396829161,-530767248));
	b.push_back(IntPoint(399391682,-529992650));
	b.push_back(IntPoint(401950078,-529204538));
	b.push_back(IntPoint(404503803,-528401419));
	b.push_back(IntPoint(407050735,-527577010));
	b.push_back(IntPoint(409593753,-526740608));
	b.push_back(IntPoint(412131274,-525887672));
	b.push_back(IntPoint(414662600,-525016524));
	b.push_back(IntPoint(417188270,-524129110));
	b.push_back(IntPoint(419709489,-523229128));
	b.push_back(IntPoint(422224529,-522312023));
	b.push_back(IntPoint(424732396,-521375477));
	b.push_back(IntPoint(427235911,-520427361));
	b.push_back(IntPoint(429733422,-519463542));
	b.push_back(IntPoint(432222843,-518479012));
	b.push_back(IntPoint(434706926,-517481094));
	b.push_back(IntPoint(437186413,-516471809));
	b.push_back(IntPoint(439657187,-515441377));
	b.push_back(IntPoint(442121153,-514394773));
	b.push_back(IntPoint(444580656,-513337723));
	b.push_back(IntPoint(447032310,-512262591));
	b.push_back(IntPoint(449475339,-511168005));
	b.push_back(IntPoint(451913848,-510063384));
	b.push_back(IntPoint(454345256,-508943220));
	b.push_back(IntPoint(456766787,-507801862));
	b.push_back(IntPoint(459183505,-506650347));
	b.push_back(IntPoint(461593524,-505484878));
	b.push_back(IntPoint(463992820,-504297489));
	b.push_back(IntPoint(466387104,-503100028));
	b.push_back(IntPoint(468774570,-501889030));
	b.push_back(IntPoint(471150792,-500656113));
	b.push_back(IntPoint(473522080,-499413735));
	b.push_back(IntPoint(475885800,-498157016));
	b.push_back(IntPoint(478238096,-496879043));
	b.push_back(IntPoint(480585816,-495592684));
	b.push_back(IntPoint(482924565,-494290084));
	b.push_back(IntPoint(485252173,-492967680));
	b.push_back(IntPoint(487575643,-491638019));
	b.push_back(IntPoint(489888160,-490289399));
	b.push_back(IntPoint(492190524,-488923518));
	b.push_back(IntPoint(494488062,-487549535));
	b.push_back(IntPoint(496773824,-486156047));
	b.push_back(IntPoint(499052139,-484750419));
	b.push_back(IntPoint(501321786,-483330837));
	b.push_back(IntPoint(503579772,-481892778));
	b.push_back(IntPoint(505832571,-480446609));
	b.push_back(IntPoint(508073982,-478982850));
	b.push_back(IntPoint(510305080,-477503420));
	b.push_back(IntPoint(512527389,-476010820));
	b.push_back(IntPoint(514740579,-474504732));
	b.push_back(IntPoint(516944846,-472985615));
	b.push_back(IntPoint(519139679,-471452899));
	b.push_back(IntPoint(521323923,-469905129));
	b.push_back(IntPoint(523495792,-468340042));
	b.push_back(IntPoint(525661124,-466765924));
	b.push_back(IntPoint(527813915,-465174697));
	b.push_back(IntPoint(529960791,-463575499));
	b.push_back(IntPoint(532093715,-461957738));
	b.push_back(IntPoint(534216963,-460327300));
	b.push_back(IntPoint(536331518,-458685603));
	b.push_back(IntPoint(538431112,-457024816));
	b.push_back(IntPoint(540526412,-455358613));
	b.push_back(IntPoint(542604596,-453671111));
	b.push_back(IntPoint(544679199,-451979209));
	b.push_back(IntPoint(546736996,-450266905));
	b.push_back(IntPoint(548788076,-448546561));
	b.push_back(IntPoint(550825682,-446810280));
	b.push_back(IntPoint(552852966,-445061957));
	b.push_back(IntPoint(554869067,-443300751));
	b.push_back(IntPoint(556873354,-441526112));
	b.push_back(IntPoint(558865843,-439738236));
	b.push_back(IntPoint(560848723,-437939709));
	b.push_back(IntPoint(562817287,-436125524));
	b.push_back(IntPoint(564778525,-434303422));
	b.push_back(IntPoint(566722847,-432463279));
	b.push_back(IntPoint(568662201,-430617902));
	b.push_back(IntPoint(570581958,-428752146));
	b.push_back(IntPoint(572498689,-426883282));
	b.push_back(IntPoint(574394049,-424992747));
	b.push_back(IntPoint(576286378,-423099178));
	b.push_back(IntPoint(578158544,-421185672));
	b.push_back(IntPoint(580025613,-419267192));
	b.push_back(IntPoint(581874841,-417331509));
	b.push_back(IntPoint(583716313,-415388447));
	b.push_back(IntPoint(585542315,-413430839));
	b.push_back(IntPoint(587357846,-411463516));
	b.push_back(IntPoint(589160323,-409484226));
	b.push_back(IntPoint(590949560,-407492960));
	b.push_back(IntPoint(592727968,-405492016));
	b.push_back(IntPoint(594490788,-403477325));
	b.push_back(IntPoint(596242022,-401452556));
	b.push_back(IntPoint(597980852,-399417125));
	b.push_back(IntPoint(599704186,-397368556));
	b.push_back(IntPoint(601419036,-395312881));
	b.push_back(IntPoint(603116959,-393243202));
	b.push_back(IntPoint(604811564,-391170807));
	b.push_back(IntPoint(606475719,-389073880));
	b.push_back(IntPoint(608136656,-386974404));
	b.push_back(IntPoint(609780895,-384861825));
	b.push_back(IntPoint(611414574,-382741070));
	b.push_back(IntPoint(613034871,-380610072));
	b.push_back(IntPoint(614637406,-378465686));
	b.push_back(IntPoint(616230122,-376313996));
	b.push_back(IntPoint(617808019,-374151416));
	b.push_back(IntPoint(619374338,-371980436));
	b.push_back(IntPoint(620926638,-369799409));
	b.push_back(IntPoint(622462888,-367607048));
	b.push_back(IntPoint(623983290,-365403667));
	b.push_back(IntPoint(625493157,-363193053));
	b.push_back(IntPoint(626987180,-360971700));
	b.push_back(IntPoint(628470280,-358743040));
	b.push_back(IntPoint(629937419,-356503841));
	b.push_back(IntPoint(631386085,-354252646));
	b.push_back(IntPoint(632827922,-351997071));
	b.push_back(IntPoint(634249109,-349728429));
	b.push_back(IntPoint(635658652,-347452533));
	b.push_back(IntPoint(637055884,-345169059));
	b.push_back(IntPoint(638431910,-342872743));
	b.push_back(IntPoint(639800977,-340572272));
	b.push_back(IntPoint(641152049,-338261187));
	b.push_back(IntPoint(642485049,-335939631));
	b.push_back(IntPoint(643810744,-333613896));
	b.push_back(IntPoint(645115777,-331276504));
	b.push_back(IntPoint(646405520,-328930640));
	b.push_back(IntPoint(647686270,-326579856));
	b.push_back(IntPoint(648945996,-324217737));
	b.push_back(IntPoint(650192123,-321848417));
	b.push_back(IntPoint(651426672,-319473043));
	b.push_back(IntPoint(652641745,-317087648));
	b.push_back(IntPoint(653842958,-314695243));
	b.push_back(IntPoint(655031781,-312296658));
	b.push_back(IntPoint(656201501,-309888699));
	b.push_back(IntPoint(657356365,-307473580));
	b.push_back(IntPoint(658499719,-305052991));
	b.push_back(IntPoint(659623813,-302623397));
	b.push_back(IntPoint(660732059,-300186534));
	b.push_back(IntPoint(661830388,-297745185));
	b.push_back(IntPoint(662907776,-295294523));
	b.push_back(IntPoint(663968462,-292836585));
	b.push_back(IntPoint(665019000,-290374293));
	b.push_back(IntPoint(666051625,-287904435));
	b.push_back(IntPoint(667064505,-285426415));
	b.push_back(IntPoint(668064807,-282943290));
	b.push_back(IntPoint(669052984,-280455316));
	b.push_back(IntPoint(670019226,-277958740));
	b.push_back(IntPoint(670971739,-275456895));
	b.push_back(IntPoint(671911866,-272950369));
	b.push_back(IntPoint(672833553,-270437003));
	b.push_back(IntPoint(673735283,-267916409));
	b.push_back(IntPoint(674625793,-265391829));
	b.push_back(IntPoint(675500719,-262861807));
	b.push_back(IntPoint(676358150,-260325801));
	b.push_back(IntPoint(677196291,-257783355));
	b.push_back(IntPoint(678023844,-255237443));
	b.push_back(IntPoint(678830741,-252684910));
	b.push_back(IntPoint(679624886,-250128380));
	b.push_back(IntPoint(680399574,-247565887));
	b.push_back(IntPoint(681161119,-244999457));
	b.push_back(IntPoint(681902226,-242427051));
	b.push_back(IntPoint(682629472,-239850692));
	b.push_back(IntPoint(683344075,-237270798));
	b.push_back(IntPoint(684036568,-234684881));
	b.push_back(IntPoint(684712893,-232094689));
	b.push_back(IntPoint(685375412,-229500931));
	b.push_back(IntPoint(686023575,-226903549));
	b.push_back(IntPoint(686649253,-224300658));
	b.push_back(IntPoint(687261062,-221694473));
	b.push_back(IntPoint(687857875,-219084813));
	b.push_back(IntPoint(688438010,-216471394));
	b.push_back(IntPoint(688998147,-213853617));
	b.push_back(IntPoint(689543877,-211232799));
	b.push_back(IntPoint(690075645,-208609111));
	b.push_back(IntPoint(690588899,-205981740));
	b.push_back(IntPoint(691081312,-203350382));
	b.push_back(IntPoint(691560815,-200716642));
	b.push_back(IntPoint(692025697,-198080282));
	b.push_back(IntPoint(692469774,-195440337));
	b.push_back(IntPoint(692897320,-192797665));
	b.push_back(IntPoint(693310160,-190152655));
	b.push_back(IntPoint(693708339,-187505399));
	b.push_back(IntPoint(694086930,-184855271));
	b.push_back(IntPoint(694444930,-182202283));
	b.push_back(IntPoint(694790744,-179547678));
	b.push_back(IntPoint(695121439,-176891148));
	b.push_back(IntPoint(695429719,-174231923));
	b.push_back(IntPoint(695723117,-171571016));
	b.push_back(IntPoint(696001600,-168908506));
	b.push_back(IntPoint(696264266,-166244389));
	b.push_back(IntPoint(696505131,-163578213));
	b.push_back(IntPoint(696731032,-160910727));
	b.push_back(IntPoint(696941945,-158242014));
	b.push_back(IntPoint(697136582,-155572065));
	b.push_back(IntPoint(697309811,-152900642));
	b.push_back(IntPoint(697468016,-150228287));
	b.push_back(IntPoint(697613142,-147555189));
	b.push_back(IntPoint(697738058,-144881071));
	b.push_back(IntPoint(697843222,-142206103));
	b.push_back(IntPoint(697933592,-139530595));
	b.push_back(IntPoint(698008887,-136854620));
	b.push_back(IntPoint(698067468,-134178227));
	b.push_back(IntPoint(698105006,-131501456));
	b.push_back(IntPoint(698127461,-128824516));
	b.push_back(IntPoint(698134828,-126147492));
	b.push_back(IntPoint(698125379,-123470475));
	b.push_back(IntPoint(698094983,-120793613));
	b.push_back(IntPoint(698049500,-118116965));
	b.push_back(IntPoint(697988937,-115440616));
	b.push_back(IntPoint(697911460,-112764704));
	b.push_back(IntPoint(697813145,-110089476));
	b.push_back(IntPoint(697701036,-107414790));
	b.push_back(IntPoint(697571328,-104740900));
	b.push_back(IntPoint(697425822,-102067823));
	b.push_back(IntPoint(697259666,-99395950));
	b.push_back(IntPoint(697078483,-96725055));
	b.push_back(IntPoint(696882289,-94055220));
	b.push_back(IntPoint(696668754,-91386715));
	b.push_back(IntPoint(696434894,-88719916));
	b.push_back(IntPoint(696186063,-86054471));
	b.push_back(IntPoint(695922288,-83390464));
	b.push_back(IntPoint(695640724,-80728278));
	b.push_back(IntPoint(695339355,-78068261));
	b.push_back(IntPoint(695023093,-75409974));
	b.push_back(IntPoint(694691974,-72753497));
	b.push_back(IntPoint(694342381,-70099388));
	b.push_back(IntPoint(693976308,-67447501));
	b.push_back(IntPoint(693590348,-64798436));
	b.push_back(IntPoint(693192183,-62151178));
	b.push_back(IntPoint(692774561,-59506919));
	b.push_back(IntPoint(692339007,-56865555));
	b.push_back(IntPoint(691888782,-54226652));
	b.push_back(IntPoint(691423934,-51590285));
	b.push_back(IntPoint(690938284,-48957672));
	b.push_back(IntPoint(690439444,-46327525));
	b.push_back(IntPoint(689919556,-43701458));
	b.push_back(IntPoint(689388457,-41077636));
	b.push_back(IntPoint(688834777,-38458485));
	b.push_back(IntPoint(688266578,-35842445));
	b.push_back(IntPoint(687684019,-33229567));
	b.push_back(IntPoint(687084987,-30620415));
	b.push_back(IntPoint(686466119,-28015897));
	b.push_back(IntPoint(685831681,-25415128));
	b.push_back(IntPoint(685183739,-22817690));
	b.push_back(IntPoint(684516679,-20225096));
	b.push_back(IntPoint(683831957,-17637111));
	b.push_back(IntPoint(683133975,-15052671));
	b.push_back(IntPoint(682420503,-12472463));
	b.push_back(IntPoint(681685414,-9898331));
	b.push_back(IntPoint(680936151,-7328289));
	b.push_back(IntPoint(680174325,-4761943));
	b.push_back(IntPoint(679393636,-2201272));
	b.push_back(IntPoint(678593209,353297));
	b.push_back(IntPoint(677780133,2903869));
	b.push_back(IntPoint(676953667,5450134));
	b.push_back(IntPoint(676107823,7990028));
	b.push_back(IntPoint(675242332,10523294));
	b.push_back(IntPoint(674366258,13052920));
	b.push_back(IntPoint(673472434,15576328));
	b.push_back(IntPoint(672564046,18094531));
	b.push_back(IntPoint(671635309,20605299));
	b.push_back(IntPoint(670696132,23112182));
	b.push_back(IntPoint(669735291,25610840));
	b.push_back(IntPoint(668763151,28105125));
	b.push_back(IntPoint(667774951,30593090));
	b.push_back(IntPoint(666767745,33073423));
	b.push_back(IntPoint(665748554,35548854));
	b.push_back(IntPoint(664711307,38016775));
	b.push_back(IntPoint(663658749,40478204));
	b.push_back(IntPoint(662589570,42932458));
	b.push_back(IntPoint(661507209,45380929));
	b.push_back(IntPoint(660409298,47822466));
	b.push_back(IntPoint(659292533,50255437));
	b.push_back(IntPoint(658165541,52683687));
	b.push_back(IntPoint(657020663,55103556));
	b.push_back(IntPoint(655857130,57514511));
	b.push_back(IntPoint(654684819,59921210));
	b.push_back(IntPoint(653493655,62318633));
	b.push_back(IntPoint(652284104,64706833));
	b.push_back(IntPoint(651065930,67090646));
	b.push_back(IntPoint(649829595,69465090));
	b.push_back(IntPoint(648574718,71829788));
	b.push_back(IntPoint(647310295,74189395));
	b.push_back(IntPoint(646029784,76540311));
	b.push_back(IntPoint(644731106,78881239));
	b.push_back(IntPoint(643420275,81215385));
	b.push_back(IntPoint(642095600,83541701));
	b.push_back(IntPoint(640755465,85859146));
	b.push_back(IntPoint(639398791,88166947));
	b.push_back(IntPoint(638028763,90466846));
	b.push_back(IntPoint(636645677,92758916));
	b.push_back(IntPoint(635246179,95041002));
	b.push_back(IntPoint(633831225,97313538));
	b.push_back(IntPoint(632402064,99577165));
	b.push_back(IntPoint(630963957,101835120));
	b.push_back(IntPoint(629506708,104080769));
	b.push_back(IntPoint(628033167,106315760));
	b.push_back(IntPoint(626549756,108544213));
	b.push_back(IntPoint(625048344,110760578));
	b.push_back(IntPoint(623538685,112971334));
	b.push_back(IntPoint(622011241,115169840));
	b.push_back(IntPoint(620467775,117357127));
	b.push_back(IntPoint(618916487,119538873));
	b.push_back(IntPoint(617343249,121704845));
	b.push_back(IntPoint(615765075,123867223));
	b.push_back(IntPoint(614167237,126015112));
	b.push_back(IntPoint(612557937,128154426));
	b.push_back(IntPoint(610936190,130284320));
	b.push_back(IntPoint(609295959,132400012));
	b.push_back(IntPoint(607647159,134509033));
	b.push_back(IntPoint(605982334,136605427));
	b.push_back(IntPoint(604307343,138693708));
	b.push_back(IntPoint(602617952,140770357));
	b.push_back(IntPoint(600915400,142836229));
	b.push_back(IntPoint(599199565,144891082));
	b.push_back(IntPoint(597470625,146934921));
	b.push_back(IntPoint(595726699,148965989));
	b.push_back(IntPoint(593973764,150989286));
	b.push_back(IntPoint(592202482,152996540));
	b.push_back(IntPoint(590425548,154998794));
	b.push_back(IntPoint(588627612,156982209));
	b.push_back(IntPoint(586826682,158962907));
	b.push_back(IntPoint(585003314,160922968));
	b.push_back(IntPoint(583177038,162880320));
	b.push_back(IntPoint(581330246,164818327));
	b.push_back(IntPoint(579478119,166751236));
	b.push_back(IntPoint(577608107,168666847));
	b.push_back(IntPoint(575730241,170574760));
	b.push_back(IntPoint(573837292,172467709));
	b.push_back(IntPoint(571934032,174350291));
	b.push_back(IntPoint(570018423,176220305));
	b.push_back(IntPoint(568090106,178077212));
	b.push_back(IntPoint(566152100,179924005));
	b.push_back(IntPoint(564199225,181755069));
	b.push_back(IntPoint(562239346,183578632));
	b.push_back(IntPoint(560262788,185384105));
	b.push_back(IntPoint(558281703,187184608));
	b.push_back(IntPoint(556281520,188963872));
	b.push_back(IntPoint(554276593,190737788));
	b.push_back(IntPoint(552255319,192493055));
	b.push_back(IntPoint(550226577,194239686));
	b.push_back(IntPoint(548184714,195970959));
	b.push_back(IntPoint(546132185,197689574));
	b.push_back(IntPoint(544070224,199396861));
	b.push_back(IntPoint(541993934,201086693));
	b.push_back(IntPoint(539909711,202766731));
	b.push_back(IntPoint(537813317,204431556));
	b.push_back(IntPoint(535708117,206085231));
	b.push_back(IntPoint(533593110,207726346));
	b.push_back(IntPoint(531466624,209352560));
	b.push_back(IntPoint(529329646,210964959));
	b.push_back(IntPoint(527183358,212564948));
	b.push_back(IntPoint(525023293,214146286));
	b.push_back(IntPoint(522857961,215720404));
	b.push_back(IntPoint(520679064,217275691));
	b.push_back(IntPoint(518494107,218822454));
	b.push_back(IntPoint(516297222,220352228));
	b.push_back(IntPoint(514088794,221865291));
	b.push_back(IntPoint(511875540,223371285));
	b.push_back(IntPoint(509647183,224854841));
	b.push_back(IntPoint(507414464,226331823));
	b.push_back(IntPoint(505170331,227791404));
	b.push_back(IntPoint(502914643,229233065));
	b.push_back(IntPoint(500654016,230666968));
	b.push_back(IntPoint(498381481,232081921));
	b.push_back(IntPoint(496101715,233485195));
	b.push_back(IntPoint(493812946,234873737));
	b.push_back(IntPoint(491513048,236243766));
	b.push_back(IntPoint(489208450,237605875));
	b.push_back(IntPoint(486892988,238949433));
	b.push_back(IntPoint(484566929,240274560));
	b.push_back(IntPoint(482235510,241590233));
	b.push_back(IntPoint(479895931,242891342));
	b.push_back(IntPoint(477545998,244173654));
	b.push_back(IntPoint(475189026,245442983));
	b.push_back(IntPoint(472825268,246699629));
	b.push_back(IntPoint(470452077,247938370));
	b.push_back(IntPoint(468070903,249161693));
	b.push_back(IntPoint(465683586,250372986));
	b.push_back(IntPoint(463287354,251566546));
	b.push_back(IntPoint(460883189,252744043));
	b.push_back(IntPoint(458473397,253909983));
	b.push_back(IntPoint(456054438,255056781));
	b.push_back(IntPoint(453628512,256188768));
	b.push_back(IntPoint(451197299,257309356));
	b.push_back(IntPoint(448756136,258408099));
	b.push_back(IntPoint(446309785,259495240));
	b.push_back(IntPoint(443857510,260568953));
	b.push_back(IntPoint(441396081,261621512));
	b.push_back(IntPoint(438930491,262664286));
	b.push_back(IntPoint(436456623,263687265));
	b.push_back(IntPoint(433976290,264694471));
	b.push_back(IntPoint(431490036,265686967));
	b.push_back(IntPoint(428997716,266664134));
	b.push_back(IntPoint(426499447,267625987));
	b.push_back(IntPoint(423993936,268568815));
	b.push_back(IntPoint(421484451,269501018));
	b.push_back(IntPoint(418968327,270415145));
	b.push_back(IntPoint(416444958,271309082));
	b.push_back(IntPoint(413916952,272189818));
	b.push_back(IntPoint(411384757,273058438));
	b.push_back(IntPoint(408845641,273906613));
	b.push_back(IntPoint(406300633,274736941));
	b.push_back(IntPoint(403751551,275554676));
	b.push_back(IntPoint(401197826,276357795));
	b.push_back(IntPoint(398638086,277141534));
	b.push_back(IntPoint(396072805,277906937));
	b.push_back(IntPoint(393504125,278660857));
	b.push_back(IntPoint(390929993,279395947));
	b.push_back(IntPoint(388351035,280113922));
	b.push_back(IntPoint(385767901,280816725));
	b.push_back(IntPoint(383181152,281506101));
	b.push_back(IntPoint(380588559,282173162));
	b.push_back(IntPoint(377992288,282825766));
	b.push_back(IntPoint(375392588,283464571));
	b.push_back(IntPoint(372788917,284086992));
	b.push_back(IntPoint(370180086,284687421));
	b.push_back(IntPoint(367568251,285274641));
	b.push_back(IntPoint(364953228,285847497));
	b.push_back(IntPoint(362334077,286401177));
	b.push_back(IntPoint(359711202,286936939));
	b.push_back(IntPoint(357085851,287460430));
	b.push_back(IntPoint(354456795,287964985));
	b.push_back(IntPoint(351824182,288450636));
	b.push_back(IntPoint(349188641,288920145));
	b.push_back(IntPoint(346550537,289375029));
	b.push_back(IntPoint(343909945,289815240));
	b.push_back(IntPoint(341265687,290232863));
	b.push_back(IntPoint(338619134,290635688));
	b.push_back(IntPoint(335970600,291025278));
	b.push_back(IntPoint(333319403,291396311));
	b.push_back(IntPoint(330665390,291746633));
	b.push_back(IntPoint(328009497,292082413));
	b.push_back(IntPoint(325351769,292403333));
	b.push_back(IntPoint(322692079,292707573));
	b.push_back(IntPoint(320030083,292990926));

	a.push_back(IntPoint(955761822,-241173480));
	a.push_back(IntPoint(866438292,-223308774));
	a.push_back(IntPoint(669926526,-223308774));
	a.push_back(IntPoint(669926526,-241173480));

	c.push_back(IntPoint(759250056,-205444067));
	c.push_back(IntPoint(669926526,-205444068));
	c.push_back(IntPoint(669926526,-223308774));
	//c.push_back(IntPoint(759250056,-223308773));
	c.push_back(IntPoint(759250056,-223308774));
	c.push_back(IntPoint(759250056,-205444067));


	Clipper c1;
	bool r = c1.AddPath(a,ptSubject,true);
	assert(r);
	r = c1.AddPath(b,ptClip,true);
	assert(r);
	Polygons results1;
	r = c1.Execute(ctIntersection ,results1,pftEvenOdd,pftEvenOdd);
	assert(r);

	Clipper c2;
	r = c2.AddPath(c,ptSubject,true);
	assert(r);
	r = c2.AddPath(b,ptClip,true);
	assert(r);
	Polygons results2;
	r = c2.Execute(ctIntersection ,results2,pftEvenOdd,pftEvenOdd);
	assert(r);


	std::ofstream script("dual.m");
	matlabBridge::TPolygon<long long> b1("g+");
	matlabBridge::TPolygon<long long> b2("b+");
	matlabBridge::TPolygon<long long> b3("c+");
	populate(b1,a);
	populate(b2,b);
	populate(b3,c);
	b1.close( );
	b2.close( );
	b2.close( );
	script << matlabBridge::FigureName("dual") << b2 << b1 << b3;
	for (ClipperLib::Paths::const_iterator pIter = results1.begin( ); pIter != results1.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans1("r+-");
		ClipperLib::Path answer = *pIter;
		populate(ans1,answer);
		ans1.close( );
		script << ans1;
	}
	for (ClipperLib::Paths::const_iterator pIter = results2.begin( ); pIter != results2.end( );++pIter) {
		matlabBridge::TPolygon<long long> ans2("k+-");
		ClipperLib::Path answer = *pIter;
		populate(ans2,answer);
		ans2.close( );
		script << ans2;
	}
	script << std::flush;
}
