name: CD

on: [push, workflow_dispatch]
  
jobs:
  build:
    name:
      ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-18.04]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: checkout vcell-solvers repo
        uses: actions/checkout@v2

      - name: Install MacOS dependencies
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install boost
          brew install hdf5
          brew install ninja

          brew install llvm
          echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
          ln -s /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
          
          gcc --version
          gfortran --version
          cmake --version
          brew info boost
          brew info hdf5

      - name: Build Macos
        if: matrix.platform == 'macos-latest'
        run: |
          platform=macos
          echo "working dir is $PWD"

          mkdir build
          cd build

          export PATH="/usr/local/opt/llvm/bin:$PATH"

          cmake \
          -G Ninja \
          -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang \
          -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ \
          -DOPTION_TARGET_MESSAGING=OFF \
          -DOPTION_TARGET_PARALLEL=OFF \
          -DOPTION_TARGET_CHOMBO2D_SOLVER=OFF \
          -DOPTION_TARGET_CHOMBO3D_SOLVER=OFF \
          -DOPTION_TARGET_SMOLDYN_SOLVER=ON \
          -DOPTION_TARGET_FV_SOLVER=ON \
          -DOPTION_TARGET_STOCHASTIC_SOLVER=ON \
          -DOPTION_TARGET_NFSIM_SOLVER=ON \
          -DOPTION_TARGET_MOVINGBOUNDARY_SOLVER=OFF \
          -DOPTION_TARGET_SUNDIALS_SOLVER=ON \
          -DOPTION_TARGET_HY3S_SOLVERS=OFF \
          -B . -S ..

          ninja

      - name: Test Macos
        if: matrix.platform == 'macos-latest'
        run: |
          platform=macos
          echo "working dir is $PWD"

          cd build

          ctest -VV
          
          echo "------ running FiniteVolume_x64 ------"
          ./bin/FiniteVolume_x64 || true
          echo
          echo "------ running NFsim_x64 ------"
          ./bin/NFsim_x64 || true
          echo "------ running SundialsSolverStandalone_x64 ------"
          ./bin/SundialsSolverStandalone_x64 || true
          echo "------ running VCellStoch_x64 ------"
          ./bin/VCellStoch_x64 || true
          echo "------ running smoldyn_x64 ------"
          ./bin/smoldyn_x64 || true
          echo "------ running testzip ------"
          ./bin/testzip || true
          echo "------ running ziptool ------"
          ./bin/ziptool || true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}


# Uncomment to debug Windows builds
      - name: Prepare Windows Workspace
        if: ${{ matrix.platform == 'windows-latest' }}
        shell: bash
        run: |
          # Create Directories
          mkdir -p ./build/src
          mkdir -p ./7z
          mkdir -p ./StrawberryPerl
          mkdir -p ./MakeForWindows
          mkdir -p ./CMake
          mkdir -p ./HDF5/build
          
          #cd ./StrawberryPerl
          
          #wget https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit.zip
          #unzip ./strawberry-perl-5.32.1.1-64bit.zip
          
      - name: Install Windows Dependencies
        if: ${{ matrix.platform == 'windows-latest' }}
        shell: pwsh
        run: |
          # Get 7-zip
          cd 7z
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7zr.exe" -OutFile "7z.exe"
          
          # Get and Install Strawberry Perl
          cd ../StrawberryPerl
          Invoke-WebRequest -Uri "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit.zip" -OutFile "StrbPerl.zip"
          Expand-Archive StrbPerl.zip
          ./StrbPerl/relocation.pl.bat
          ./StrbPerl/update_env.pl.bat
          
          # Get and Install Make for Windows
          cd ../MakeForWindows
          Start-BitsTransfer -Source "https://sourceforge.net/projects/gnuwin32/files/make/3.81/make-3.81-bin.zip/download" -Destination "make_bin.zip"
          Start-BitsTransfer -Source "https://sourceforge.net/projects/gnuwin32/files/make/3.81/make-3.81-dep.zip/download" -Destination "make_dep.zip"
          Expand-Archive make_bin.zip
          Expand-Archive make_dep.zip
          cp make_dep/bin/* make_bin/bin
          Path = (Resolve-Path "./make_dep/bin").toString()
          $Path = $Path + [IO.Path]::PathSeparator + [Environment]::GetEnvironmentVariable("PATH", "Machine")
          [Environment]::SetEnvironmentVariable( "Path", $Path, "Machine" )
          $env:path -split ";"
          ./make_bin/bin/make.exe --help
          
          # Get and Install CMake
          cd ../CMake
          Invoke-WebRequest -Uri "https://github.com/Kitware/CMake/releases/download/v3.25.0-rc3/cmake-3.25.0-rc3-windows-x86_64.zip" -OutFile "CMake.zip"
          Expand-Archive CMake.zip
          $Path = Resolve-Path "./CMake/*/bin"
          $Path = $Path + [IO.Path]::PathSeparator + [Environment]::GetEnvironmentVariable("PATH", "Machine")
          [Environment]::SetEnvironmentVariable( "Path", $Path, "Machine" )
          Write-Output [Environment]::GetEnvironmentVariable("PATH", "Machine")
          ./*/bin/cmake.exe --help
          ./*/bin/cmake.exe --version
          
          # Get and Install HDF5
          cd ../HDF5
          Invoke-WebRequest -Uri "https://www.hdfgroup.org/package/cmake-hdf5-1-12-1-zip/?wpdmdl=15723&refresh=6369780490cb91667856388" -OutFile "hdf5_cmake.zip"
          Expand-Archive hdf5_cmake.zip
          cd hdf5_cmake/*/hdf5-1.12.1
          mkdir build
          cd build
          ../../../../../CMake/*/bin/cmake.exe --version
          cmake.exe --version
          cmake.exe --help
          cmake.exe -G "Unix Makefiles" ..
          ../../../../../MakeForWindows/make_bin/bin/make.exe --version
          make.exe --version
          make.exe --help
          make.exe
          
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ matrix.platform == 'windows-latest' }}
        
      - name: Setup tmate session (FAILURE OCCURED!)
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }} && ${{ matrix.platform == 'windows-latest' }}


# Uncomment to debug Linux builds
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: ${{ matrix.platform == 'ubuntu-18.04' }}
