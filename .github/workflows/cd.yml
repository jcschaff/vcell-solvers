name: CD

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  native-build:
    name:
      native-build-${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-18.04]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: checkout vcell-solvers repo
        uses: actions/checkout@v3

      - name: Install MacOS dependencies
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install boost
          brew install hdf5
          brew install ninja

          brew install llvm
          echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
          ln -s /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
          
          gcc --version
          gfortran --version
          cmake --version
          brew info boost
          brew info hdf5

      - name: Build Macos
        if: matrix.platform == 'macos-latest'
        run: |
          platform=macos
          echo "working dir is $PWD"

          mkdir build
          cd build

          export PATH="/usr/local/opt/llvm/bin:$PATH"

          cmake \
          -G Ninja \
          -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang \
          -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ \
          -DOPTION_TARGET_MESSAGING=OFF \
          -DOPTION_TARGET_PARALLEL=OFF \
          -DOPTION_TARGET_CHOMBO2D_SOLVER=OFF \
          -DOPTION_TARGET_CHOMBO3D_SOLVER=OFF \
          -DOPTION_TARGET_SMOLDYN_SOLVER=ON \
          -DOPTION_TARGET_FV_SOLVER=ON \
          -DOPTION_TARGET_STOCHASTIC_SOLVER=ON \
          -DOPTION_TARGET_NFSIM_SOLVER=ON \
          -DOPTION_TARGET_MOVINGBOUNDARY_SOLVER=ON \
          -DOPTION_TARGET_SUNDIALS_SOLVER=ON \
          -DOPTION_TARGET_HY3S_SOLVERS=OFF \
          -B . -S ..

          ninja

      - name: Test Macos
        if: matrix.platform == 'macos-latest'
        run: |
          platform=macos
          echo "working dir is $PWD"

          cd build

          ctest -VV
          
          echo "------ running FiniteVolume_x64 ------"
          ./bin/FiniteVolume_x64 || true
          echo
          echo "------ running NFsim_x64 ------"
          ./bin/NFsim_x64 || true
          echo "------ running SundialsSolverStandalone_x64 ------"
          ./bin/SundialsSolverStandalone_x64 || true
          echo "------ running VCellStoch_x64 ------"
          ./bin/VCellStoch_x64 || true
          echo "------ running smoldyn_x64 ------"
          ./bin/smoldyn_x64 || true
          echo "------ running testzip ------"
          ./bin/testzip || true
          echo "------ running ziptool ------"
          ./bin/ziptool || true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}


# Uncomment to debug Windows builds
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: ${{ matrix.platform == 'windows-latest' }}


# Uncomment to debug Linux builds
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: ${{ matrix.platform == 'ubuntu-18.04' }}
